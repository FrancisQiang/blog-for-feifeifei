<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lgq.dao.BlogCommentMapper">
  <resultMap id="BaseResultMap" type="com.lgq.domain.BlogComment">
    <id column="blog_comment_id" jdbcType="INTEGER" property="blogCommentId" />
    <result column="blog_comment_username" jdbcType="VARCHAR" property="blogCommentUsername" />
    <result column="blog_comment_blog_id" jdbcType="INTEGER" property="blogCommentBlogId" />
    <result column="blog_comment_date" jdbcType="TIMESTAMP" property="blogCommentDate" />
    <result column="blog_comment_parent_id" jdbcType="INTEGER" property="blogCommentParentId" />
    <result column="blog_comment_delete_flag" jdbcType="BIT" property="blogCommentDeleteFlag" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.lgq.domain.BlogComment">
    <result column="blog_comment_content" jdbcType="LONGVARCHAR" property="blogCommentContent" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    blog_comment_id, blog_comment_username, blog_comment_blog_id, blog_comment_date, 
    blog_comment_parent_id, blog_comment_delete_flag
  </sql>
  <sql id="Blob_Column_List">
    blog_comment_content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.lgq.domain.BlogCommentExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from blog_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.lgq.domain.BlogCommentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from blog_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from blog_comment
    where blog_comment_id = #{blogCommentId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from blog_comment
    where blog_comment_id = #{blogCommentId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.lgq.domain.BlogCommentExample">
    delete from blog_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.lgq.domain.BlogComment">
    insert into blog_comment (blog_comment_id, blog_comment_username, 
      blog_comment_blog_id, blog_comment_date, blog_comment_parent_id, 
      blog_comment_delete_flag, blog_comment_content
      )
    values (#{blogCommentId,jdbcType=INTEGER}, #{blogCommentUsername,jdbcType=VARCHAR}, 
      #{blogCommentBlogId,jdbcType=INTEGER}, #{blogCommentDate,jdbcType=TIMESTAMP}, #{blogCommentParentId,jdbcType=INTEGER}, 
      #{blogCommentDeleteFlag,jdbcType=BIT}, #{blogCommentContent,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.lgq.domain.BlogComment">
    insert into blog_comment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="blogCommentId != null">
        blog_comment_id,
      </if>
      <if test="blogCommentUsername != null">
        blog_comment_username,
      </if>
      <if test="blogCommentBlogId != null">
        blog_comment_blog_id,
      </if>
      <if test="blogCommentDate != null">
        blog_comment_date,
      </if>
      <if test="blogCommentParentId != null">
        blog_comment_parent_id,
      </if>
      <if test="blogCommentDeleteFlag != null">
        blog_comment_delete_flag,
      </if>
      <if test="blogCommentContent != null">
        blog_comment_content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="blogCommentId != null">
        #{blogCommentId,jdbcType=INTEGER},
      </if>
      <if test="blogCommentUsername != null">
        #{blogCommentUsername,jdbcType=VARCHAR},
      </if>
      <if test="blogCommentBlogId != null">
        #{blogCommentBlogId,jdbcType=INTEGER},
      </if>
      <if test="blogCommentDate != null">
        #{blogCommentDate,jdbcType=TIMESTAMP},
      </if>
      <if test="blogCommentParentId != null">
        #{blogCommentParentId,jdbcType=INTEGER},
      </if>
      <if test="blogCommentDeleteFlag != null">
        #{blogCommentDeleteFlag,jdbcType=BIT},
      </if>
      <if test="blogCommentContent != null">
        #{blogCommentContent,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lgq.domain.BlogCommentExample" resultType="java.lang.Long">
    select count(*) from blog_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update blog_comment
    <set>
      <if test="record.blogCommentId != null">
        blog_comment_id = #{record.blogCommentId,jdbcType=INTEGER},
      </if>
      <if test="record.blogCommentUsername != null">
        blog_comment_username = #{record.blogCommentUsername,jdbcType=VARCHAR},
      </if>
      <if test="record.blogCommentBlogId != null">
        blog_comment_blog_id = #{record.blogCommentBlogId,jdbcType=INTEGER},
      </if>
      <if test="record.blogCommentDate != null">
        blog_comment_date = #{record.blogCommentDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.blogCommentParentId != null">
        blog_comment_parent_id = #{record.blogCommentParentId,jdbcType=INTEGER},
      </if>
      <if test="record.blogCommentDeleteFlag != null">
        blog_comment_delete_flag = #{record.blogCommentDeleteFlag,jdbcType=BIT},
      </if>
      <if test="record.blogCommentContent != null">
        blog_comment_content = #{record.blogCommentContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update blog_comment
    set blog_comment_id = #{record.blogCommentId,jdbcType=INTEGER},
      blog_comment_username = #{record.blogCommentUsername,jdbcType=VARCHAR},
      blog_comment_blog_id = #{record.blogCommentBlogId,jdbcType=INTEGER},
      blog_comment_date = #{record.blogCommentDate,jdbcType=TIMESTAMP},
      blog_comment_parent_id = #{record.blogCommentParentId,jdbcType=INTEGER},
      blog_comment_delete_flag = #{record.blogCommentDeleteFlag,jdbcType=BIT},
      blog_comment_content = #{record.blogCommentContent,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update blog_comment
    set blog_comment_id = #{record.blogCommentId,jdbcType=INTEGER},
      blog_comment_username = #{record.blogCommentUsername,jdbcType=VARCHAR},
      blog_comment_blog_id = #{record.blogCommentBlogId,jdbcType=INTEGER},
      blog_comment_date = #{record.blogCommentDate,jdbcType=TIMESTAMP},
      blog_comment_parent_id = #{record.blogCommentParentId,jdbcType=INTEGER},
      blog_comment_delete_flag = #{record.blogCommentDeleteFlag,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lgq.domain.BlogComment">
    update blog_comment
    <set>
      <if test="blogCommentUsername != null">
        blog_comment_username = #{blogCommentUsername,jdbcType=VARCHAR},
      </if>
      <if test="blogCommentBlogId != null">
        blog_comment_blog_id = #{blogCommentBlogId,jdbcType=INTEGER},
      </if>
      <if test="blogCommentDate != null">
        blog_comment_date = #{blogCommentDate,jdbcType=TIMESTAMP},
      </if>
      <if test="blogCommentParentId != null">
        blog_comment_parent_id = #{blogCommentParentId,jdbcType=INTEGER},
      </if>
      <if test="blogCommentDeleteFlag != null">
        blog_comment_delete_flag = #{blogCommentDeleteFlag,jdbcType=BIT},
      </if>
      <if test="blogCommentContent != null">
        blog_comment_content = #{blogCommentContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where blog_comment_id = #{blogCommentId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.lgq.domain.BlogComment">
    update blog_comment
    set blog_comment_username = #{blogCommentUsername,jdbcType=VARCHAR},
      blog_comment_blog_id = #{blogCommentBlogId,jdbcType=INTEGER},
      blog_comment_date = #{blogCommentDate,jdbcType=TIMESTAMP},
      blog_comment_parent_id = #{blogCommentParentId,jdbcType=INTEGER},
      blog_comment_delete_flag = #{blogCommentDeleteFlag,jdbcType=BIT},
      blog_comment_content = #{blogCommentContent,jdbcType=LONGVARCHAR}
    where blog_comment_id = #{blogCommentId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lgq.domain.BlogComment">
    update blog_comment
    set blog_comment_username = #{blogCommentUsername,jdbcType=VARCHAR},
      blog_comment_blog_id = #{blogCommentBlogId,jdbcType=INTEGER},
      blog_comment_date = #{blogCommentDate,jdbcType=TIMESTAMP},
      blog_comment_parent_id = #{blogCommentParentId,jdbcType=INTEGER},
      blog_comment_delete_flag = #{blogCommentDeleteFlag,jdbcType=BIT}
    where blog_comment_id = #{blogCommentId,jdbcType=INTEGER}
  </update>


  <select id="getLatestComment" resultMap="ResultMapWithBLOBs">
    select * from blog_comment order by blog_comment_date desc limit 10
  </select>

  <select id="getBlogCommentByBlogId" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer">
    select *
    from blog_comment where blog_comment_blog_id = #{id} and blog_comment_delete_flag = 0
  </select>


</mapper>