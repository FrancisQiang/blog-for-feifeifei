2019-12-29 00:00:32.408 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteIconController - FrancisBlog: addSiteIcon -> {"siteIconColor":"","siteIconDescription":"肥肥肥","siteIconName":"QQ","siteIconUrl":"sdasa","siteIconValue":"#icon-QQ"}
2019-12-29 00:00:32.516 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 00:01:01.635 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 00:01:01.771 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 00:01:01.776 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 00:01:01.781 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 00:03:27.772 [http-nio-8080-exec-6] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 00:03:29.036 [http-nio-8080-exec-10] INFO  com.lgq.controller.TokenController - FrancisBlog: getToken
2019-12-29 00:03:29.040 [http-nio-8080-exec-1] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 00:03:29.040 [http-nio-8080-exec-2] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogById: blog_id:1
2019-12-29 00:03:29.088 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.BlogServiceImpl - null
2019-12-29 00:03:29.192 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.BlogServiceImpl - 61
2019-12-29 00:03:43.070 [http-nio-8080-exec-8] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 00:03:46.124 [http-nio-8080-exec-3] INFO  com.lgq.controller.TokenController - FrancisBlog: getToken
2019-12-29 00:03:46.128 [http-nio-8080-exec-4] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogById: blog_id:2
2019-12-29 00:03:46.128 [http-nio-8080-exec-5] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 00:03:46.140 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.BlogServiceImpl - null
2019-12-29 00:03:46.164 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.BlogServiceImpl - 1
2019-12-29 00:03:48.617 [http-nio-8080-exec-7] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 00:03:49.807 [http-nio-8080-exec-9] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:2
2019-12-29 00:03:51.211 [http-nio-8080-exec-6] INFO  com.lgq.controller.TokenController - FrancisBlog: getToken
2019-12-29 00:03:51.211 [http-nio-8080-exec-10] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogById: blog_id:5
2019-12-29 00:03:51.215 [http-nio-8080-exec-6] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 00:03:51.223 [http-nio-8080-exec-10] INFO  com.lgq.service.impl.BlogServiceImpl - 1577549026140
2019-12-29 00:03:51.227 [http-nio-8080-exec-10] INFO  com.lgq.service.impl.BlogServiceImpl - 1
2019-12-29 00:04:27.500 [http-nio-8080-exec-2] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 00:04:30.404 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 00:04:53.878 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteIconController - FrancisBlog: addSiteIcon -> {"siteIconColor":"","siteIconDescription":"大傻子","siteIconId":2,"siteIconName":"微信","siteIconUrl":"https://www.google.com.hk/","siteIconValue":"#icon-weixin"}
2019-12-29 00:04:54.135 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 00:05:05.625 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteIconController - FrancisBlog: addSiteIcon -> {"siteIconColor":"","siteIconDescription":"真聪明","siteIconId":3,"siteIconName":"陌陌","siteIconUrl":"https://www.google.com","siteIconValue":"#icon-momo"}
2019-12-29 00:05:05.839 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 00:05:23.871 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteIconController - FrancisBlog: addSiteIcon -> {"siteIconColor":"","siteIconDescription":"肥肥肥","siteIconId":4,"siteIconName":"QQ","siteIconUrl":"www.baidu.com","siteIconValue":"#icon-QQ"}
2019-12-29 00:05:24.100 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 00:05:51.871 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 00:05:51.875 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 00:05:51.886 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 00:05:51.886 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 00:07:36.998 [http-nio-8080-exec-10] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 00:07:38.310 [http-nio-8080-exec-2] INFO  com.lgq.controller.TokenController - FrancisBlog: getToken
2019-12-29 00:07:38.318 [http-nio-8080-exec-3] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 00:08:03.501 [http-nio-8080-exec-4] INFO  com.lgq.controller.BlogController - FrancisBlog: addBlog -> {"blogCategoryId":2,"blogContent":"<p>湿哒哒持续性差</p>\n","blogCover":"http://img.francisqiang.top/1577549258","blogTitle":"我是一只小鸟"}
2019-12-29 00:08:05.247 [http-nio-8080-exec-7] INFO  com.lgq.controller.BlogController - FrancisBlog: addBlog -> {"blogCategoryId":2,"blogContent":"<p>湿哒哒持续性差</p>\n","blogCover":"http://img.francisqiang.top/1577549258","blogTitle":"我是一只小鸟"}
2019-12-29 00:09:28.842 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 00:09:28.847 [http-nio-8080-exec-9] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 00:09:28.889 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 00:09:28.901 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 00:10:06.835 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 00:10:06.835 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 00:10:06.835 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 00:10:06.845 [http-nio-8080-exec-5] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 00:10:41.478 [main] INFO  com.lgq.FrancisBlogApplication - Starting FrancisBlogApplication on DESKTOP-G6KT9CH with PID 10604 (I:\blog_for_feifeifei\blog-for-feifeifei\target\classes started by lin in I:\blog_for_feifeifei\blog-for-feifeifei)
2019-12-29 00:10:41.488 [main] INFO  com.lgq.FrancisBlogApplication - No active profile set, falling back to default profiles: default
2019-12-29 00:10:43.872 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2019-12-29 00:10:43.872 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data repositories in DEFAULT mode.
2019-12-29 00:10:43.995 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 103ms. Found 0 repository interfaces.
2019-12-29 00:10:44.542 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$362ff34f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-29 00:10:45.110 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2019-12-29 00:10:45.135 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-12-29 00:10:45.145 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-12-29 00:10:45.145 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-12-29 00:10:45.155 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.17] of the APR based Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [1.2.21]
2019-12-29 00:10:45.155 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded APR based Apache Tomcat Native library [1.2.17] using APR version [1.6.3].
2019-12-29 00:10:45.155 [main] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2019-12-29 00:10:45.155 [main] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2019-12-29 00:10:46.304 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.0.2o  27 Mar 2018]
2019-12-29 00:10:46.504 [main] INFO  o.a.c.c.C.[.[localhost].[/francisblog/api/v1] - Initializing Spring embedded WebApplicationContext
2019-12-29 00:10:46.504 [main] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 4913 ms
2019-12-29 00:10:48.646 [main] INFO  s.d.s.w.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)]
2019-12-29 00:10:48.894 [main] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2019-12-29 00:10:49.424 [main] INFO  s.d.s.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2019-12-29 00:10:49.454 [main] INFO  s.d.s.web.plugins.DocumentationPluginsBootstrapper - Found 1 custom documentation plugin(s)
2019-12-29 00:10:49.544 [main] INFO  s.d.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2019-12-29 00:10:49.795 [main] INFO  s.d.s.w.r.operation.CachingOperationNameGenerator - Generating unique operation named: getAllAlbumUsingGET_1
2019-12-29 00:10:50.003 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-12-29 00:10:50.043 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/francisblog/api/v1'
2019-12-29 00:10:50.043 [main] INFO  com.lgq.FrancisBlogApplication - Started FrancisBlogApplication in 9.659 seconds (JVM running for 13.865)
2019-12-29 00:11:25.635 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/francisblog/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-12-29 00:11:25.635 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2019-12-29 00:11:25.651 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 16 ms
2019-12-29 00:11:25.927 [http-nio-8080-exec-1] INFO  com.lgq.controller.BlogController - FrancisBlog: addBlog -> {"blogCategoryId":2,"blogContent":"<p>湿哒哒持续性差</p>\n","blogCover":"http://img.francisqiang.top/1577549258","blogTitle":"我是一只小鸟"}
2019-12-29 00:11:26.072 [http-nio-8080-exec-1] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2019-12-29 00:11:26.835 [http-nio-8080-exec-3] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 00:11:35.510 [http-nio-8080-exec-2] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:2
2019-12-29 00:11:40.730 [http-nio-8080-exec-4] INFO  com.lgq.controller.TokenController - FrancisBlog: getToken
2019-12-29 00:11:40.734 [http-nio-8080-exec-5] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogById: blog_id:6
2019-12-29 00:11:40.746 [http-nio-8080-exec-6] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 00:11:40.960 [http-nio-8080-exec-5] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2019-12-29 00:11:40.964 [http-nio-8080-exec-5] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2019-12-29 00:11:45.862 [http-nio-8080-exec-5] INFO  com.lgq.service.impl.BlogServiceImpl - null
2019-12-29 00:11:45.982 [http-nio-8080-exec-5] INFO  com.lgq.service.impl.BlogServiceImpl - 1
2019-12-29 00:15:44.081 [main] INFO  com.lgq.FrancisBlogApplication - Starting FrancisBlogApplication on DESKTOP-G6KT9CH with PID 7888 (I:\blog_for_feifeifei\blog-for-feifeifei\target\classes started by lin in I:\blog_for_feifeifei\blog-for-feifeifei)
2019-12-29 00:15:44.090 [main] INFO  com.lgq.FrancisBlogApplication - No active profile set, falling back to default profiles: default
2019-12-29 00:15:46.282 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2019-12-29 00:15:46.282 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data repositories in DEFAULT mode.
2019-12-29 00:15:46.412 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 100ms. Found 0 repository interfaces.
2019-12-29 00:15:46.993 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$f08f81ee] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-29 00:15:47.583 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2019-12-29 00:15:47.613 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-12-29 00:15:47.633 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-12-29 00:15:47.633 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-12-29 00:15:47.643 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.17] of the APR based Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [1.2.21]
2019-12-29 00:15:47.643 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded APR based Apache Tomcat Native library [1.2.17] using APR version [1.6.3].
2019-12-29 00:15:47.643 [main] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2019-12-29 00:15:47.643 [main] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2019-12-29 00:15:48.811 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.0.2o  27 Mar 2018]
2019-12-29 00:15:49.021 [main] INFO  o.a.c.c.C.[.[localhost].[/francisblog/api/v1] - Initializing Spring embedded WebApplicationContext
2019-12-29 00:15:49.031 [main] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 4818 ms
2019-12-29 00:15:52.156 [main] INFO  s.d.s.w.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)]
2019-12-29 00:15:52.435 [main] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2019-12-29 00:15:53.234 [main] INFO  s.d.s.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2019-12-29 00:15:53.334 [main] INFO  s.d.s.web.plugins.DocumentationPluginsBootstrapper - Found 1 custom documentation plugin(s)
2019-12-29 00:15:53.450 [main] INFO  s.d.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2019-12-29 00:15:53.772 [main] INFO  s.d.s.w.r.operation.CachingOperationNameGenerator - Generating unique operation named: getAllAlbumUsingGET_1
2019-12-29 00:15:54.043 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-12-29 00:15:54.083 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/francisblog/api/v1'
2019-12-29 00:15:54.093 [main] INFO  com.lgq.FrancisBlogApplication - Started FrancisBlogApplication in 11.19 seconds (JVM running for 15.071)
2019-12-29 00:17:56.964 [http-nio-8080-exec-10] INFO  o.a.c.c.C.[.[localhost].[/francisblog/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-12-29 00:17:56.964 [http-nio-8080-exec-10] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2019-12-29 00:17:56.984 [http-nio-8080-exec-10] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 16 ms
2019-12-29 00:17:57.044 [http-nio-8080-exec-9] INFO  com.lgq.controller.TokenController - FrancisBlog: getToken
2019-12-29 00:17:57.044 [http-nio-8080-exec-8] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 00:17:57.060 [http-nio-8080-exec-10] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogById: blog_id:6
2019-12-29 00:17:57.152 [http-nio-8080-exec-10] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2019-12-29 00:17:57.580 [http-nio-8080-exec-10] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2019-12-29 00:17:57.580 [http-nio-8080-exec-10] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2019-12-29 00:17:58.373 [http-nio-8080-exec-7] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 00:18:02.800 [http-nio-8080-exec-10] INFO  com.lgq.service.impl.BlogServiceImpl - null
2019-12-29 00:18:03.120 [http-nio-8080-exec-10] INFO  com.lgq.service.impl.BlogServiceImpl - 2
2019-12-29 00:18:05.443 [http-nio-8080-exec-5] INFO  com.lgq.controller.TokenController - FrancisBlog: getToken
2019-12-29 00:18:05.447 [http-nio-8080-exec-4] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 00:18:05.447 [http-nio-8080-exec-6] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogById: blog_id:1
2019-12-29 00:18:05.459 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.BlogServiceImpl - 1577549882804
2019-12-29 00:18:05.463 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.BlogServiceImpl - 62
2019-12-29 00:19:56.714 [http-nio-8080-exec-7] INFO  com.lgq.controller.BlogController - FrancisBlog: updateBlogById -> {"blogCategoryId":2,"blogContent":"<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 16px; color: rgb(62, 62, 62); line-height: 1.7; word-spacing: 0px; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;\"><h2 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.5em; border-bottom: 2.2px solid rgb(255, 111, 0);\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; background: rgb(255, 111, 0); padding: 5px 15px; display: inline-block;\">写在前面的话</span></h2>\n<h3 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">马上要考试了！！！</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">作为一个苦逼的在读大学生，又要面临半年一度的期末考试了，因为上课没听，我啥都不会，什么通信原理，单片机。。。饶了我吧！！！</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">给你们看看我上课在干啥你就知道我为啥啥都不会了。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc20055d848f2?w=1365&amp;h=1024&amp;f=jpeg&amp;s=267781\" alt=\"上课笔记。。\" title=\"上课笔记。。\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">上课笔记。。</figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">emmm，字比较丑😑。我还记得那是一堂英语课，老师不让用电子设备，我只能手写我这篇文章的思路。。。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">所以，冒着期末要挂科的风险👊，我也得把这篇文章写完，给大家分享知识，自己也能重新复习和认识一下 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Spring Cloud</code>。</p>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 1em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 8px solid rgb(255, 138, 101); background: rgb(224, 242, 241); overflow: auto; overflow-wrap: normal; word-break: normal; letter-spacing: 1.5px; font-family: YouYuan;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">我女朋友说，要是这篇文章能有 50 个赞就给我买个 SSD 🙏🙏🙏</p>\n</blockquote>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">首先我给大家看一张图，如果大家对这张图有些地方不太理解的话，我希望你们看完我这篇文章会恍然大悟。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc20c173ddc33?w=1355&amp;h=772&amp;f=jpeg&amp;s=94118\" alt=\"总体架构\" title=\"总体架构\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">总体架构</figcaption></figure>\n<h2 id=\"hspringcloud\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.5em; border-bottom: 2.2px solid rgb(255, 111, 0);\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; background: rgb(255, 111, 0); padding: 5px 15px; display: inline-block;\">什么是Spring cloud</span></h2>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 1em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 8px solid rgb(255, 138, 101); background: rgb(224, 242, 241); overflow: auto; overflow-wrap: normal; word-break: normal; letter-spacing: 1.5px; font-family: YouYuan;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">构建分布式系统不需要复杂和容易出错。Spring Cloud 为最常见的分布式系统模式提供了一种简单且易于接受的编程模型，帮助开发人员构建有弹性的、可靠的、协调的应用程序。Spring Cloud 构建于 Spring Boot 之上，使得开发者很容易入手并快速应用于生产中。</p>\n</blockquote>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">官方果然官方，介绍都这么有板有眼的。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">我所理解的 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Spring Cloud</code> 就是微服务系统架构的一站式解决方案，在平时我们构建微服务的过程中需要做如 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">服务发现注册</strong> 、<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">配置中心</strong> 、<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">消息总线</strong> 、<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">负载均衡</strong> 、<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">断路器</strong> 、<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">数据监控</strong> 等操作，而 Spring Cloud 为我们提供了一套简易的编程模型，使我们能在 Spring Boot 的基础上轻松地实现微服务项目的构建。</p>\n<h2 id=\"hspringcloud-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.5em; border-bottom: 2.2px solid rgb(255, 111, 0);\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; background: rgb(255, 111, 0); padding: 5px 15px; display: inline-block;\">Spring Cloud 的版本</span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">当然这个只是个题外话。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">Spring Cloud 的版本号并不是我们通常见的数字版本号，而是一些很奇怪的单词。这些单词均为英国伦敦地铁站的站名。同时根据字母表的顺序来对应版本时间顺序，比如：最早 的 Release 版本 Angel，第二个 Release 版本 Brixton（英国地名），然后是 Camden、 Dalston、Edgware、Finchley、Greenwich、Hoxton。</p>\n<h2 id=\"hspringcloudeureka\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.5em; border-bottom: 2.2px solid rgb(255, 111, 0);\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; background: rgb(255, 111, 0); padding: 5px 15px; display: inline-block;\">Spring Cloud 的服务发现框架——Eureka</span></h2>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 1em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 8px solid rgb(255, 138, 101); background: rgb(224, 242, 241); overflow: auto; overflow-wrap: normal; word-break: normal; letter-spacing: 1.5px; font-family: YouYuan;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">Eureka是基于REST（代表性状态转移）的服务，主要在AWS云中用于定位服务，以实现负载均衡和中间层服务器的故障转移。我们称此服务为Eureka服务器。Eureka还带有一个基于Java的客户端组件Eureka Client，它使与服务的交互变得更加容易。客户端还具有一个内置的负载平衡器，可以执行基本的循环负载平衡。在Netflix，更复杂的负载均衡器将Eureka包装起来，以基于流量，资源使用，错误条件等多种因素提供加权负载均衡，以提供出色的弹性。</p>\n</blockquote>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">总的来说，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka</code> 就是一个服务发现框架。何为服务，何又为发现呢？</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">举一个生活中的例子，就比如我们平时租房子找中介的事情。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">在没有中介的时候我们需要一个一个去寻找是否有房屋要出租的房东，这显然会非常的费力，一你找凭一个人的能力是找不到很多房源供你选择，再者你也懒得这么找下去(找了这么久，没有合适的只能将就)。<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">这里的我们就相当于微服务中的 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Consumer</code> ，而那些房东就相当于微服务中的 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Provider</code> 。消费者 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Consumer</code> 需要调用提供者 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Provider</code> 提供的一些服务，就像我们现在需要租他们的房子一样。</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">但是如果只是租客和房东之间进行寻找的话，他们的效率是很低的，房东找不到租客赚不到钱，租客找不到房东住不了房。所以，后来房东肯定就想到了广播自己的房源信息(比如在街边贴贴小广告)，这样对于房东来说已经完成他的任务(将房源公布出去)，但是有两个问题就出现了。第一、其他不是租客的都能收到这种租房消息，这在现实世界没什么，但是在计算机的世界中就会出现<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">资源消耗</strong>的问题了。第二、租客这样还是很难找到你，试想一下我需要租房，我还需要东一个西一个地去找街边小广告，麻不麻烦？</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc217754bbd75?w=400&amp;h=450&amp;f=png&amp;s=41229\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">那怎么办呢？我们当然不会那么傻乎乎的，第一时间就是去找 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">中介</strong> 呀，它为我们提供了统一房源的地方，我们消费者只需要跑到它那里去找就行了。而对于房东来说，他们也只需要把房源在中介那里发布就行了。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc21a63a8c04f?w=220&amp;h=220&amp;f=gif&amp;s=75532\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">那么现在，我们的模式就是这样的了。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc21d88611f8a?w=1068&amp;h=466&amp;f=jpeg&amp;s=40952\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">但是，这个时候还会出现一些问题。</p>\n<ol style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">房东注册之后如果不想卖房子了怎么办？我们是不是需要让房东<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">定期续约</strong>？如果房东不进行续约是不是要将他们从中介那里的注册列表中<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">移除</strong>。</li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">租客是不是也要进行<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">注册</strong>呢？不然合同乙方怎么来呢？</li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">中介可不可以做<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">连锁店</strong>呢？如果这一个店因为某些不可抗力因素而无法使用，那么我们是否可以换一个连锁店呢？</li>\n</ol>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">针对上面的问题我们来重新构建一下上面的模式图</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc22031ad3eaa?w=1159&amp;h=659&amp;f=jpeg&amp;s=60657\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">好了，举完这个🌰我们就可以来看关于 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka</code> 的一些基础概念了，你会发现这东西理解起来怎么这么简单。👎👎👎</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">服务发现</strong>：其实就是一个“中介”，整个过程中有三个角色：<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">服务提供者(出租房子的)、服务消费者(租客)、服务中介(房屋中介)</strong>。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">服务提供者</strong>： 就是提供一些自己能够执行的一些服务给外界。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">服务消费者</strong>： 就是需要使用一些服务的“用户”。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">服务中介</strong>： 其实就是服务提供者和服务消费者之间的“桥梁”，服务提供者可以把自己注册到服务中介那里，而服务消费者如需要消费一些服务(使用一些功能)就可以在服务中介中寻找注册在服务中介的服务提供者。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">服务注册 Register</strong>：</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">官方解释：当 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka</code> 客户端向 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka Server</code> 注册时，它提供自身的<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">元数据</strong>，比如IP地址、端口，运行状况指示符URL，主页等。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">结合中介理解：房东 (提供者 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka Client Provider</code>)在中介 (服务器 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka Server</code>) 那里登记房屋的信息，比如面积，价格，地段等等(元数据 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">metaData</code>)。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">服务续约 Renew</strong>：</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">官方解释：<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka</code> 客户会每隔30秒(默认情况下)发送一次心跳来续约</strong>。 通过续约来告知 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka Server</code> 该 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka</code> 客户仍然存在，没有出现问题。 正常情况下，如果 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka Server</code> 在90秒没有收到 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka</code> 客户的续约，它会将实例从其注册表中删除。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">结合中介理解：房东 (提供者 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka Client Provider</code>) 定期告诉中介 (服务器 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka Server</code>) 我的房子还租(续约) ，中介 (服务器<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka Server</code>) 收到之后继续保留房屋的信息。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">获取注册列表信息 Fetch Registries</strong>： </p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">官方解释：<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka</code> 客户端从服务器获取注册表信息，并将其缓存在本地。客户端会使用该信息查找其他服务，从而进行远程调用。该注册列表信息定期（每30秒钟）更新一次。每次返回注册列表信息可能与 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka</code> 客户端的缓存信息不同, <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka</code> 客户端自动处理。如果由于某种原因导致注册列表信息不能及时匹配，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka</code> 客户端则会重新获取整个注册表信息。 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka</code> 服务器缓存注册列表信息，整个注册表以及每个应用程序的信息进行了压缩，压缩内容和没有压缩的内容完全相同。<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka</code> 客户端和 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka</code> 服务器可以使用JSON / XML格式进行通讯。在默认的情况下 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka</code> 客户端使用压缩 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">JSON</code> 格式来获取注册列表的信息。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">结合中介理解：租客(消费者 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka Client Consumer</code>) 去中介 (服务器 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka Server</code>) 那里获取所有的房屋信息列表 (客户端列表 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka Client List</code>) ，而且租客为了获取最新的信息会定期向中介 (服务器 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka Server</code>) 那里获取并更新本地列表。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">服务下线 Cancel</strong>：</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">官方解释：Eureka客户端在程序关闭时向Eureka服务器发送取消请求。 发送请求后，该客户端实例信息将从服务器的实例注册表中删除。该下线请求不会自动完成，它需要调用以下内容：<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">DiscoveryManager.getInstance().shutdownComponent();</code></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">结合中介理解：房东 (提供者 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka Client Provider</code>) 告诉中介  (服务器 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka Server</code>) 我的房子不租了，中介之后就将注册的房屋信息从列表中剔除。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">服务剔除 Eviction</strong>：</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">官方解释：在默认的情况下，<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">当Eureka客户端连续90秒(3个续约周期)没有向Eureka服务器发送服务续约，即心跳，Eureka服务器会将该服务实例从服务注册列表删除</strong>，即服务剔除。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">结合中介理解：房东(提供者 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka Client Provider</code>) 会定期联系 中介  (服务器 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka Server</code>) 告诉他我的房子还租(续约)，如果中介  (服务器 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka Server</code>) 长时间没收到提供者的信息，那么中介会将他的房屋信息给下架(服务剔除)。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">下面就是 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Netflix</code> 官方给出的 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka</code> 架构图，你会发现和我们前面画的中介图别无二致。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://user-gold-cdn.xitu.io/2019/11/20/16e86737ea057126?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"Eureka架构图\" title=\"Eureka架构图\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">Eureka架构图</figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">当然，可以充当服务发现的组件有很多：<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Zookeeper</code> ，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Consul</code> ， <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka</code> 等。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">更多关于 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka</code> 的知识(自我保护，初始注册策略等等)可以自己去官网查看，或者查看我的另一篇文章 <a href=\"https://juejin.im/post/5dd497e3f265da0ba7718018\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">深入理解 Eureka</a>。</p>\n<h2 id=\"hribbon\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.5em; border-bottom: 2.2px solid rgb(255, 111, 0);\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; background: rgb(255, 111, 0); padding: 5px 15px; display: inline-block;\">负载均衡之 Ribbon</span></h2>\n<h3 id=\"hresttemplate\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">什么是 RestTemplate?</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">不是讲 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Ribbon</code> 么？怎么扯到了 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">RestTemplate</code> 了？你先别急，听我慢慢道来。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">我不听我不听我不听🙉🙉🙉。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">我就说一句！<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">RestTemplate</code>是<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Spring</code>提供的一个访问Http服务的客户端类</strong>，怎么说呢？就是微服务之间的调用是使用的 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">RestTemplate</code> 。比如这个时候我们 消费者B 需要调用 提供者A 所提供的服务我们就需要这么写。如我下面的伪代码。</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; line-height: 25px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@Autowired</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">private</span>&nbsp;RestTemplate&nbsp;restTemplate;<br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;这里是提供者A的ip地址，但是如果使用了&nbsp;Eureka&nbsp;那么就应该是提供者A的名称</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">final</span>&nbsp;String&nbsp;SERVICE_PROVIDER_A&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"http://localhost:8081\"</span>;<br><br><span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@PostMapping</span>(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"/judge\"</span>)<br><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">boolean</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">judge</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(@RequestBody&nbsp;Request&nbsp;request)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;url&nbsp;=&nbsp;SERVICE_PROVIDER_A&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"/service1\"</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;restTemplate.postForObject(url,&nbsp;request,&nbsp;Boolean.class);<br>}<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">如果你对源码感兴趣的话，你会发现上面我们所讲的 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka</code> 框架中的 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">注册</strong>、<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">续约</strong> 等，底层都是使用的 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">RestTemplate</code> 。</p>\n<h3 id=\"hribbon-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">为什么需要 Ribbon？</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Ribbon</code>  是 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Netflix</code> 公司的一个开源的负载均衡 项目，是一个客户端/进程内负载均衡器，<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">运行在消费者端</strong>。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">我们再举个🌰，比如我们设计了一个秒杀系统，但是为了整个系统的 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">高可用</strong> ，我们需要将这个系统做一个集群，而这个时候我们消费者就可以拥有多个秒杀系统的调用途径了，如下图。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc22c6c20487d?w=859&amp;h=570&amp;f=jpeg&amp;s=37856\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">如果这个时候我们没有进行一些 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">均衡操作</strong> ，如果我们对 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">秒杀系统1</code> 进行大量的调用，而另外两个基本不请求，就会导致 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">秒杀系统1</code> 崩溃，而另外两个就变成了傀儡，那么我们为什么还要做集群，我们高可用体现的意义又在哪呢？</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">所以 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Ribbon</code> 出现了，注意我们上面加粗的几个字——<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">运行在消费者端</strong>。指的是，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Ribbon</code> 是运行在消费者端的负载均衡器，如下图。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc22fdf3c8470?w=898&amp;h=540&amp;f=jpeg&amp;s=41392\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">其工作原理就是 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Consumer</code> 端获取到了所有的服务列表之后，在其<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">内部</strong>使用<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">负载均衡算法</strong>，进行对多个系统的调用。</p>\n<h3 id=\"hnginxribbon\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Nginx 和 Ribbon 的对比</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">提到 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">负载均衡</strong> 就不得不提到大名鼎鼎的 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Nignx</code> 了，而和 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Ribbon</code> 不同的是，它是一种<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">集中式</strong>的负载均衡器。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">何为集中式呢？简单理解就是 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">将所有请求都集中起来，然后再进行负载均衡</strong>。如下图。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc233e2b80367?w=892&amp;h=382&amp;f=jpeg&amp;s=22307\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">我们可以看到 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Nginx</code> 是接收了所有的请求进行负载均衡的，而对于 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Ribbon</code> 来说它是在消费者端进行的负载均衡。如下图。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc2364acb65aa?w=1045&amp;h=578&amp;f=jpeg&amp;s=61344\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 1em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 8px solid rgb(255, 138, 101); background: rgb(224, 242, 241); overflow: auto; overflow-wrap: normal; word-break: normal; letter-spacing: 1.5px; font-family: YouYuan;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">请注意 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Request</code> 的位置，在 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Nginx</code> 中请求是先进入负载均衡器，而在 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Ribbon</code> 中是先在客户端进行负载均衡才进行请求的。</p>\n</blockquote>\n<h3 id=\"hribbon-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Ribbon 的几种负载均衡算法</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">负载均衡，不管 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Nginx</code> 还是 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Ribbon</code> 都需要其算法的支持，如果我没记错的话 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Nginx</code> 使用的是 轮询和加权轮询算法。而在 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Ribbon</code> 中有更多的负载均衡调度算法，其默认是使用的 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">RoundRobinRule</code> 轮询策略。</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">RoundRobinRule</strong>：轮询策略。<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Ribbon</code> 默认采用的策略。若经过一轮轮询没有找到可用的 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">provider</code>，其最多轮询 10 轮。若最终还没有找到，则返回 null。</li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">RandomRule</strong>: 随机策略，从所有可用的 provider 中随机选择一个。</li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">RetryRule</strong>: 重试策略。先按照 RoundRobinRule 策略获取 provider，若获取失败，则在指定的时限内重试。默认的时限为 500 毫秒。</li>\n</ul>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">🐦🐦🐦 还有很多，这里不一一举🌰了，你最需要知道的是默认轮询算法，并且可以更换默认的负载均衡算法，只需要在配置文件中做出修改就行。</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"yaml language-yaml\" style=\"overflow-wrap: break-word; padding: 2px 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248); line-height: 25px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">providerName:<br>&nbsp;&nbsp;ribbon:<br>&nbsp;&nbsp;&nbsp;&nbsp;NFLoadBalancerRuleClassName:&nbsp;com.netflix.loadbalancer.RandomRule<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">当然，在 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Ribbon</code> 中你还可以<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">自定义负载均衡算法</strong>，你只需要实现 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">IRule</code> 接口，然后修改配置文件或者自定义 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Java Config</code> 类。</p>\n<h2 id=\"hopenfeign\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.5em; border-bottom: 2.2px solid rgb(255, 111, 0);\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; background: rgb(255, 111, 0); padding: 5px 15px; display: inline-block;\">什么是 Open Feign</span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">有了 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">RestTemplate</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Ribbon</code> 我们就可以😃愉快地进行服务间的调用了，但是使用 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">RestTemplate</code> 还是不方便，我们每次都要进行这样的调用。</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; line-height: 25px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@Autowired</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">private</span>&nbsp;RestTemplate&nbsp;restTemplate;<br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;这里是提供者A的ip地址，但是如果使用了&nbsp;Eureka&nbsp;那么就应该是提供者A的名称</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">final</span>&nbsp;String&nbsp;SERVICE_PROVIDER_A&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"http://localhost:8081\"</span>;<br><br><span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@PostMapping</span>(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"/judge\"</span>)<br><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">boolean</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">judge</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(@RequestBody&nbsp;Request&nbsp;request)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;url&nbsp;=&nbsp;SERVICE_PROVIDER_A&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"/service1\"</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;是不是太麻烦了？？？每次都要&nbsp;url、请求、返回类型的&nbsp;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;restTemplate.postForObject(url,&nbsp;request,&nbsp;Boolean.class);<br>}<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">这样每次都调用 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">RestRemplate</code> 的 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">API</code> 是否太麻烦，我能不能像<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">调用原来代码一样进行各个服务间的调用呢？</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">💡💡💡聪明的小朋友肯定想到了，那就用 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">映射</strong> 呀，就像域名和IP地址的映射。我们可以将被调用的服务代码映射到消费者端，这样我们就可以 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">“无缝开发”</strong>啦。</p>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 1em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 8px solid rgb(255, 138, 101); background: rgb(224, 242, 241); overflow: auto; overflow-wrap: normal; word-break: normal; letter-spacing: 1.5px; font-family: YouYuan;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">OpenFeign 也是运行在消费者端的，使用 Ribbon 进行负载均衡，所以 OpenFeign 直接内置了 Ribbon。</p>\n</blockquote>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">在导入了 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Open Feign</code> 之后我们就可以进行愉快编写  <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Consumer</code> 端代码了。</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; line-height: 25px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;使用&nbsp;@FeignClient&nbsp;注解来指定提供者的名字</span><br><span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@FeignClient</span>(value&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"eureka-client-provider\"</span>)<br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">interface</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">TestClient</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;这里一定要注意需要使用的是提供者那端的请求相对路径，这里就相当于映射了</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@RequestMapping</span>(value&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"/provider/xxx\"</span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;method&nbsp;=&nbsp;RequestMethod.POST)<br>&nbsp;&nbsp;&nbsp;&nbsp;CommonResponse&lt;List&lt;Plan&gt;&gt;&nbsp;getPlans(<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@RequestBody</span>&nbsp;planGetRequest&nbsp;request);<br>}<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">然后我们在 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Controller</code> 就可以像原来调用 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Service</code> 层代码一样调用它了。</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; line-height: 25px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@RestController</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">TestController</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;这里就相当于原来自动注入的&nbsp;Service</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@Autowired</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">private</span>&nbsp;TestClient&nbsp;testClient;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;controller&nbsp;调用&nbsp;service&nbsp;层代码</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@RequestMapping</span>(value&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"/test\"</span>,&nbsp;method&nbsp;=&nbsp;RequestMethod.POST)<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;CommonResponse&lt;List&lt;Plan&gt;&gt;&nbsp;get(<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@RequestBody</span>&nbsp;planGetRequest&nbsp;request)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;testClient.getPlans(request);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<h2 id=\"hhystrix\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.5em; border-bottom: 2.2px solid rgb(255, 111, 0);\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; background: rgb(255, 111, 0); padding: 5px 15px; display: inline-block;\">必不可少的 Hystrix</span></h2>\n<h3 id=\"hhystrix-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">什么是 Hystrix之熔断和降级</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc24783b5e7fc?w=640&amp;h=225&amp;f=png&amp;s=86330\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 1em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 8px solid rgb(255, 138, 101); background: rgb(224, 242, 241); overflow: auto; overflow-wrap: normal; word-break: normal; letter-spacing: 1.5px; font-family: YouYuan;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">在分布式环境中，不可避免地会有许多服务依赖项中的某些失败。Hystrix是一个库，可通过添加等待时间容限和容错逻辑来帮助您控制这些分布式服务之间的交互。Hystrix通过隔离服务之间的访问点，停止服务之间的级联故障并提供后备选项来实现此目的，所有这些都可以提高系统的整体弹性。</p>\n</blockquote>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">总体来说 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Hystrix</code> 就是一个能进行 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">熔断</strong> 和 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">降级</strong> 的库，通过使用它能提高整个系统的弹性。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">那么什么是 熔断和降级 呢？再举个🌰，此时我们整个微服务系统是这样的。服务A调用了服务B，服务B再调用了服务C，但是因为某些原因，服务C顶不住了，这个时候大量请求会在服务C阻塞。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc24d04aaf4d6?w=911&amp;h=245&amp;f=jpeg&amp;s=37289\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">服务C阻塞了还好，毕竟只是一个系统崩溃了。但是请注意这个时候因为服务C不能返回响应，那么服务B调用服务C的的请求就会阻塞，同理服务B阻塞了，那么服务A也会阻塞崩溃。</p>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 1em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 8px solid rgb(255, 138, 101); background: rgb(224, 242, 241); overflow: auto; overflow-wrap: normal; word-break: normal; letter-spacing: 1.5px; font-family: YouYuan;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">请注意，为什么阻塞会崩溃。因为这些请求会消耗占用系统的线程、IO 等资源，消耗完你这个系统服务器不就崩了么。</p>\n</blockquote>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc24ed9701419?w=980&amp;h=526&amp;f=jpeg&amp;s=92391\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">这就叫 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">服务雪崩</strong>。妈耶，上面两个 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">熔断</strong> 和 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">降级</strong> 你都没给我解释清楚，你现在又给我扯什么 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">服务雪崩</strong> ？😵😵😵</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">别急，听我慢慢道来。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc251eba559c9?w=150&amp;h=165&amp;f=gif&amp;s=46208\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">不听我也得讲下去！</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">所谓 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">熔断</strong> 就是服务雪崩的一种有效解决方案。当指定时间窗内的请求失败率达到设定阈值时，系统将通过 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">断路器</strong> 直接将此请求链路断开。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">也就是我们上面服务B调用服务C在指定时间窗内，调用的失败率到达了一定的值，那么 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Hystrix</code> 则会自动将 服务B与C 之间的请求都断了，以免导致服务雪崩现象。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">其实这里所讲的 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">熔断</strong> 就是指的 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Hystrix</code> 中的 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">断路器模式</strong> ，你可以使用简单的 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">@HystrixCommand</code> 注解来标注某个方法，这样 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Hystrix</code> 就会使用 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">断路器</strong> 来“包装”这个方法，每当调用时间超过指定时间时(默认为1000ms)，断路器将会中断对这个方法的调用。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">当然你可以对这个注解的很多属性进行设置，比如设置超时时间，像这样。</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; line-height: 25px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@HystrixCommand</span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;commandProperties&nbsp;=&nbsp;{<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@HystrixProperty</span>(name&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"execution.isolation.thread.timeoutInMilliseconds\"</span>,value&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"1200\"</span>)}<br>)<br><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;List&lt;Xxx&gt;&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">getXxxx</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;...省略代码逻辑</span><br>}<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">但是，我查阅了一些博客，发现他们都将 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">熔断</strong> 和 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">降级</strong> 的概念混淆了，以我的理解，<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">降级是为了更好的用户体验，当一个方法调用异常时，通过执行另一种代码逻辑来给用户友好的回复</strong>。这也就对应着 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Hystrix</code> 的 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">后备处理</strong> 模式。你可以通过设置 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">fallbackMethod</code> 来给一个方法设置备用的代码逻辑。比如这个时候有一个热点新闻出现了，我们会推荐给用户查看详情，然后用户会通过id去查询新闻的详情，但是因为这条新闻太火了(比如最近什么*易对吧)，大量用户同时访问可能会导致系统崩溃，那么我们就进行 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">服务降级</strong> ，一些请求会做一些降级处理比如当前人数太多请稍后查看等等。</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; line-height: 25px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;指定了后备方法调用</span><br><span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@HystrixCommand</span>(fallbackMethod&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"getHystrixNews\"</span>)<br><span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@GetMapping</span>(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"/get/news\"</span>)<br><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;News&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">getNews</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(@PathVariable(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"id\"</span>)</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;id)&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;调用新闻系统的获取新闻api&nbsp;代码逻辑省略</span><br>}<br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;</span><br><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;News&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">getHystrixNews</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(@PathVariable(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"id\"</span>)</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;id)&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;做服务降级</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;返回当前人数太多，请稍后查看</span><br>}<br></code></pre>\n<h3 id=\"hhystrix-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">什么是Hystrix之其他</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">我在阅读 《Spring微服务实战》这本书的时候还接触到了一个<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">舱壁模式</strong>的概念。在不使用舱壁模式的情况下，服务A调用服务B，这种调用默认的是<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">使用同一批线程来执行</strong>的，而在一个服务出现性能问题的时候，就会出现所有线程被刷爆并等待处理工作，同时阻塞新请求，最终导致程序崩溃。而舱壁模式会将远程资源调用隔离在他们自己的线程池中，以便可以控制单个表现不佳的服务，而不会使该程序崩溃。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">具体其原理我推荐大家自己去了解一下，本篇文章中对<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">舱壁模式</strong>不做过多解释。当然还有 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Hystrix</code> 仪表盘</strong>，它是<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">用来实时监控 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Hystrix</code> 的各项指标信息的</strong>，这里我将这个问题也抛出去，希望有不了解的可以自己去搜索一下。</p>\n<h2 id=\"hzuul\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.5em; border-bottom: 2.2px solid rgb(255, 111, 0);\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; background: rgb(255, 111, 0); padding: 5px 15px; display: inline-block;\">微服务网关——Zuul</span></h2>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc256025dae7b?w=1200&amp;h=835&amp;f=png&amp;s=117215\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 1em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 8px solid rgb(255, 138, 101); background: rgb(224, 242, 241); overflow: auto; overflow-wrap: normal; word-break: normal; letter-spacing: 1.5px; font-family: YouYuan;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">ZUUL 是从设备和 web 站点到 Netflix 流应用后端的所有请求的前门。作为边界服务应用，ZUUL 是为了实现动态路由、监视、弹性和安全性而构建的。它还具有根据情况将请求路由到多个 Amazon Auto Scaling Groups（亚马逊自动缩放组，亚马逊的一种云计算方式） 的能力</p>\n</blockquote>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">在上面我们学习了 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka</code> 之后我们知道了 <em style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-style: italic;\">服务提供者</em> 是 <em style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-style: italic;\">消费者</em> 通过 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka Server</code> 进行访问的，即 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka Server</code> 是 <em style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-style: italic;\">服务提供者</em> 的统一入口。那么整个应用中存在那么多 <em style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-style: italic;\">消费者</em> 需要用户进行调用，这个时候用户该怎样访问这些 <em style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-style: italic;\">消费者工程</em> 呢？当然可以像之前那样直接访问这些工程。但这种方式没有统一的消费者工程调用入口，不便于访问与管理，而 Zuul 就是这样的一个对于 <em style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-style: italic;\">消费者</em> 的统一入口。</p>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 1em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 8px solid rgb(255, 138, 101); background: rgb(224, 242, 241); overflow: auto; overflow-wrap: normal; word-break: normal; letter-spacing: 1.5px; font-family: YouYuan;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">如果学过前端的肯定都知道 Router 吧，比如 Flutter 中的路由，Vue，React中的路由，用了 Zuul 你会发现在路由功能方面和前端配置路由基本是一个理。😁 我偶尔撸撸 Flutter。</p>\n</blockquote>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">大家对网关应该很熟吧，简单来讲网关是系统唯一对外的入口，介于客户端与服务器端之间，用于对请求进行<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">鉴权</strong>、<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">限流</strong>、 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">路由</strong>、<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">监控</strong>等功能。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc258218b66ad?w=1506&amp;h=707&amp;f=jpeg&amp;s=77265\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">没错，网关有的功能，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Zuul</code> 基本都有。而 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Zuul</code> 中最关键的就是 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">路由和过滤器</strong> 了，在官方文档中 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Zuul</code> 的标题就是</p>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 1em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 8px solid rgb(255, 138, 101); background: rgb(224, 242, 241); overflow: auto; overflow-wrap: normal; word-break: normal; letter-spacing: 1.5px; font-family: YouYuan;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">Router and Filter : Zuul</p>\n</blockquote>\n<h3 id=\"hzuul-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Zuul 的路由功能</span></h3>\n<h4 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">简单配置</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">本来想给你们复制一些代码，但是想了想，因为各个代码配置比较零散，看起来也比较零散，我决定还是给你们画个图来解释吧。</p>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 1em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 8px solid rgb(255, 138, 101); background: rgb(224, 242, 241); overflow: auto; overflow-wrap: normal; word-break: normal; letter-spacing: 1.5px; font-family: YouYuan;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">请不要因为我这么好就给我点赞 👍 。 疯狂暗示。</p>\n</blockquote>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">比如这个时候我们已经向 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka Server</code> 注册了两个 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Consumer</code> 、三个 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Provicer</code> ，这个时候我们再加个 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Zuul</code> 网关应该变成这样子了。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc25a33523ae5?w=1413&amp;h=628&amp;f=jpeg&amp;s=89195\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">emmm，信息量有点大，我来解释一下。关于前面的知识我就不解释了😐 。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">首先，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Zuul</code> 需要向 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka</code> 进行注册，注册有啥好处呢？</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">你傻呀，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Consumer</code> 都向 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka Server</code> 进行注册了，我网关是不是只要注册就能拿到所有 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Consumer</code> 的信息了？</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">拿到信息有什么好处呢？</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">我拿到信息我是不是可以获取所有的 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Consumer</code> 的元数据(名称，ip，端口)？</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">拿到这些元数据有什么好处呢？拿到了我们是不是直接可以做<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">路由映射</strong>？比如原来用户调用 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Consumer1</code> 的接口 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">localhost:8001/studentInfo/update</code> 这个请求，我们是不是可以这样进行调用了呢？<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">localhost:9000/consumer1/studentInfo/update</code> 呢？你这样是不是恍然大悟了？</p>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 1em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 8px solid rgb(255, 138, 101); background: rgb(224, 242, 241); overflow: auto; overflow-wrap: normal; word-break: normal; letter-spacing: 1.5px; font-family: YouYuan;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这里的url为了让更多人看懂所以没有使用 restful 风格。</p>\n</blockquote>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">上面的你理解了，那么就能理解关于 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Zuul</code> 最基本的配置了，看下面。</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"yaml language-yaml\" style=\"overflow-wrap: break-word; padding: 2px 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248); line-height: 25px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">server:<br>&nbsp;&nbsp;port:&nbsp;9000<br>eureka:<br>&nbsp;&nbsp;client:<br>&nbsp;&nbsp;&nbsp;&nbsp;service-url:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;这里只要注册&nbsp;Eureka&nbsp;就行了<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;defaultZone:&nbsp;http://localhost:9997/eureka<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">然后在启动类上加入 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">@EnableZuulProxy</code> 注解就行了。没错，就是那么简单😃。</p>\n<h4 id=\"h-3\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">统一前缀</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">这个很简单，就是我们可以在前面加一个统一的前缀，比如我们刚刚调用的是 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">localhost:9000/consumer1/studentInfo/update</code>，这个时候我们在 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">yaml</code> 配置文件中添加如下。</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"yaml language-yaml\" style=\"overflow-wrap: break-word; padding: 2px 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248); line-height: 25px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">zuul:<br>&nbsp;&nbsp;prefix:&nbsp;/zuul<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">这样我们就需要通过 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">localhost:9000/zuul/consumer1/studentInfo/update</code> 来进行访问了。</p>\n<h4 id=\"h-4\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">路由策略配置</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">你会发现前面的访问方式(直接使用服务名)，需要将微服务名称暴露给用户，会存在安全性问题。所以，可以自定义路径来替代微服务名称，即自定义路由策略。</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"yaml language-yaml\" style=\"overflow-wrap: break-word; padding: 2px 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248); line-height: 25px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">zuul:<br>&nbsp;&nbsp;routes:<br>&nbsp;&nbsp;&nbsp;&nbsp;consumer1:&nbsp;/FrancisQ1/**<br>&nbsp;&nbsp;&nbsp;&nbsp;consumer2:&nbsp;/FrancisQ2/**<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">这个时候你就可以使用 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">localhost:9000/zuul/FrancisQ1/studentInfo/update</code> 进行访问了。</p>\n<h4 id=\"h-5\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">服务名屏蔽</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">这个时候你别以为你好了，你可以试试，在你配置完路由策略之后使用微服务名称还是可以访问的，这个时候你需要将服务名屏蔽。</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"yaml language-yaml\" style=\"overflow-wrap: break-word; padding: 2px 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248); line-height: 25px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">zuul:<br>&nbsp;&nbsp;ignore-services:&nbsp;\"*\"<br></code></pre>\n<h4 id=\"h-6\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">路径屏蔽</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Zuul</code> 还可以指定屏蔽掉的路径 URI，即只要用户请求中包含指定的 URI 路径，那么该请求将无法访问到指定的服务。通过该方式可以限制用户的权限。</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"yaml language-yaml\" style=\"overflow-wrap: break-word; padding: 2px 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248); line-height: 25px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">zuul:<br>&nbsp;&nbsp;ignore-patterns:&nbsp;**/auto/**<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">这样关于 auto 的请求我们就可以过滤掉了。</p>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 1em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 8px solid rgb(255, 138, 101); background: rgb(224, 242, 241); overflow: auto; overflow-wrap: normal; word-break: normal; letter-spacing: 1.5px; font-family: YouYuan;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">** 代表匹配多级任意路径</p>\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">*代表匹配一级任意路径</p>\n</blockquote>\n<h4 id=\"h-7\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">敏感请求头屏蔽</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">默认情况下，像 Cookie、Set-Cookie 等敏感请求头信息会被 zuul 屏蔽掉，我们可以将这些默认屏蔽去掉，当然，也可以添加要屏蔽的请求头。</p>\n<h3 id=\"hzuul-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Zuul 的过滤功能</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">如果说，路由功能是 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Zuul</code> 的基操的话，那么<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">过滤器</strong>就是 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Zuul</code>的利器了。毕竟所有请求都经过网关(Zuul)，那么我们可以进行各种过滤，这样我们就能实现 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">限流</strong>，<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">灰度发布</strong>，<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">权限控制</strong> 等等。</p>\n<h4 id=\"h-8\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">简单实现一个请求时间日志打印</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">要实现自己定义的 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Filter</code> 我们只需要继承 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">ZuulFilter</code> 然后将这个过滤器类以 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">@Component</code> 注解加入 Spring 容器中就行了。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">在给你们看代码之前我先给你们解释一下关于过滤器的一些注意点。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc25e0f16f172?w=1014&amp;h=617&amp;f=jpeg&amp;s=61899\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">过滤器类型：Pre、Routing、Post。前置Pre就是在请求之前进行过滤，Routing路由过滤器就是我们上面所讲的路由策略，而Post后置过滤器就是在 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Response</code> 之前进行过滤的过滤器。你可以观察上图结合着理解，并且下面我会给出相应的注释。</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; line-height: 25px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;加入Spring容器</span><br><span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@Component</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">PreRequestFilter</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">ZuulFilter</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;返回过滤器类型&nbsp;这里是前置过滤器</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;String&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">filterType</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;FilterConstants.PRE_TYPE;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;指定过滤顺序&nbsp;越小越先执行，这里第一个执行</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;当然不是只真正第一个&nbsp;在Zuul内置中有其他过滤器会先执行</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;那是写死的&nbsp;比如&nbsp;SERVLET_DETECTION_FILTER_ORDER&nbsp;=&nbsp;-3</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">filterOrder</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">0</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;什么时候该进行过滤</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;这里我们可以进行一些判断，这样我们就可以过滤掉一些不符合规定的请求等等</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">boolean</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">shouldFilter</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">true</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;如果过滤器允许通过则怎么进行处理</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">run</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">throws</span>&nbsp;ZuulException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;这里我设置了全局的RequestContext并记录了请求开始时间</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RequestContext&nbsp;ctx&nbsp;=&nbsp;RequestContext.getCurrentContext();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.set(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"startTime\"</span>,&nbsp;System.currentTimeMillis());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">null</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; line-height: 25px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;lombok的日志</span><br><span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@Slf</span>4j<br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;加入&nbsp;Spring&nbsp;容器</span><br><span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@Component</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">AccessLogFilter</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">ZuulFilter</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;指定该过滤器的过滤类型</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;此时是后置过滤器</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;String&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">filterType</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;FilterConstants.POST_TYPE;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;SEND_RESPONSE_FILTER_ORDER&nbsp;是最后一个过滤器</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;我们此过滤器在它之前执行</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">filterOrder</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;FilterConstants.SEND_RESPONSE_FILTER_ORDER&nbsp;-&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">boolean</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">shouldFilter</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">true</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;过滤时执行的策略</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">run</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">throws</span>&nbsp;ZuulException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RequestContext&nbsp;context&nbsp;=&nbsp;RequestContext.getCurrentContext();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HttpServletRequest&nbsp;request&nbsp;=&nbsp;context.getRequest();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;从RequestContext获取原先的开始时间&nbsp;并通过它计算整个时间间隔</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Long&nbsp;startTime&nbsp;=&nbsp;(Long)&nbsp;context.get(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"startTime\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;这里我可以获取HttpServletRequest来获取URI并且打印出来</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;uri&nbsp;=&nbsp;request.getRequestURI();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">long</span>&nbsp;duration&nbsp;=&nbsp;System.currentTimeMillis()&nbsp;-&nbsp;startTime;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.info(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"uri:&nbsp;\"</span>&nbsp;+&nbsp;uri&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\",&nbsp;duration:&nbsp;\"</span>&nbsp;+&nbsp;duration&nbsp;/&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">100</span>&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"ms\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">null</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">上面就简单实现了请求时间日志打印功能，你有没有感受到 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Zuul</code> 过滤功能的强大了呢？</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">没有？好的、那我们再来。</p>\n<h4 id=\"h-9\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">令牌桶限流</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">当然不仅仅是令牌桶限流方式，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Zuul</code> 只要是限流的活它都能干，这里我只是简单举个🌰。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc26128b67534?w=1238&amp;h=798&amp;f=jpeg&amp;s=62955\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">我先来解释一下什么是 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">令牌桶限流</strong> 吧。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">首先我们会有个桶，如果里面没有满那么就会以一定 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">固定的速率</strong> 会往里面放令牌，一个请求过来首先要从桶中获取令牌，如果没有获取到，那么这个请求就拒绝，如果获取到那么就放行。很简单吧，啊哈哈、</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">下面我们就通过 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Zuul</code> 的前置过滤器来实现一下令牌桶限流。</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; line-height: 25px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@Component</span><br><span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@Slf</span>4j<br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">RouteFilter</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">ZuulFilter</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;定义一个令牌桶，每秒产生2个令牌，即每秒最多处理2个请求</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">final</span>&nbsp;RateLimiter&nbsp;RATE_LIMITER&nbsp;=&nbsp;RateLimiter.create(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">2</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;String&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">filterType</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;FilterConstants.PRE_TYPE;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">filterOrder</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;-<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">5</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">run</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">throws</span>&nbsp;ZuulException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.info(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"放行\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">null</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">boolean</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">shouldFilter</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RequestContext&nbsp;context&nbsp;=&nbsp;RequestContext.getCurrentContext();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>(!RATE_LIMITER.tryAcquire())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.warn(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"访问量超载\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;指定当前请求未通过过滤</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.setSendZuulResponse(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">false</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;向客户端返回响应码429，请求数量过多</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.setResponseStatusCode(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">429</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">false</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">true</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">这样我们就能将请求数量控制在一秒两个，有没有觉得很酷？</p>\n<h3 id=\"hzuul-3\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">关于 Zuul  的其他</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Zuul</code> 的过滤器的功能肯定不止上面我所实现的两种，它还可以实现 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">权限校验</strong>，包括我上面提到的 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">灰度发布</strong> 等等。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">当然，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Zuul</code> 作为网关肯定也存在 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">单点问题</strong> ，如果我们要保证 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Zuul</code> 的高可用，我们就需要进行 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Zuul</code> 的集群配置，这个时候可以借助额外的一些负载均衡器比如 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Nginx</code> 。</p>\n<h2 id=\"hspringcloudconfig\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.5em; border-bottom: 2.2px solid rgb(255, 111, 0);\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; background: rgb(255, 111, 0); padding: 5px 15px; display: inline-block;\">Spring Cloud配置管理——Config</span></h2>\n<h3 id=\"h-10\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">为什么要使用进行配置管理？</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">当我们的微服务系统开始慢慢地庞大起来，那么多 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Consumer</code> 、<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Provider</code> 、<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Eureka Server</code> 、<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Zuul</code> 系统都会持有自己的配置，这个时候我们在项目运行的时候可能需要更改某些应用的配置，如果我们不进行配置的统一管理，我们只能<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">去每个应用下一个一个寻找配置文件然后修改配置文件再重启应用</strong>。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">首先对于分布式系统而言我们就不应该去每个应用下去分别修改配置文件，再者对于重启应用来说，服务无法访问所以直接抛弃了可用性，这是我们更不愿见到的。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">那么有没有一种方法<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">既能对配置文件统一地进行管理，又能在项目运行时动态修改配置文件呢？</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">那就是我今天所要介绍的 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Spring Cloud Config</code> 。</p>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 1em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 8px solid rgb(255, 138, 101); background: rgb(224, 242, 241); overflow: auto; overflow-wrap: normal; word-break: normal; letter-spacing: 1.5px; font-family: YouYuan;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">能进行配置管理的框架不止 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Spring Cloud Config</code> 一种，大家可以根据需求自己选择（disconf，阿波罗等等）。而且对于 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Config</code> 来说有些地方实现的不是那么尽人意。</p>\n</blockquote>\n<h3 id=\"hconfig\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Config 是什么</span></h3>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 1em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 8px solid rgb(255, 138, 101); background: rgb(224, 242, 241); overflow: auto; overflow-wrap: normal; word-break: normal; letter-spacing: 1.5px; font-family: YouYuan;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Spring Cloud Config</code> 为分布式系统中的外部化配置提供服务器和客户端支持。使用 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Config</code> 服务器，可以在中心位置管理所有环境中应用程序的外部属性。</p>\n</blockquote>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">简单来说，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Spring Cloud Config</code> 就是能将各个 应用/系统/模块 的配置文件存放到 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">统一的地方然后进行管理</strong>(Git 或者 SVN)。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">你想一下，我们的应用是不是只有启动的时候才会进行配置文件的加载，那么我们的 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Spring Cloud Config</code> 就暴露出一个接口给启动应用来获取它所想要的配置文件，应用获取到配置文件然后再进行它的初始化工作。就如下图。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc2651947af87?w=1155&amp;h=539&amp;f=jpeg&amp;s=37498\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">当然这里你肯定还会有一个疑问，如果我在应用运行时去更改远程配置仓库(Git)中的对应配置文件，那么依赖于这个配置文件的已启动的应用会不会进行其相应配置的更改呢？</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">答案是不会的。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">什么？那怎么进行动态修改配置文件呢？这不是出现了 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">配置漂移</strong> 吗？你个渣男🤬，你又骗我！</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">别急嘛，你可以使用 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Webhooks</code> ，这是  <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">github</code> 提供的功能，它能确保远程库的配置文件更新后客户端中的配置信息也得到更新。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">噢噢，这还差不多。我去查查怎么用。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">慢着，听我说完，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Webhooks</code> 虽然能解决，但是你了解一下会发现它根本不适合用于生产环境，所以基本不会使用它的。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc2678affa4af?w=200&amp;h=200&amp;f=gif&amp;s=13521\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">而一般我们会使用 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Bus</code> 消息总线 + <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Spring Cloud Config</code> 进行配置的动态刷新。</p>\n<h2 id=\"hspringcloudbus\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.5em; border-bottom: 2.2px solid rgb(255, 111, 0);\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; background: rgb(255, 111, 0); padding: 5px 15px; display: inline-block;\">引出 Spring Cloud Bus</span></h2>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 1em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 8px solid rgb(255, 138, 101); background: rgb(224, 242, 241); overflow: auto; overflow-wrap: normal; word-break: normal; letter-spacing: 1.5px; font-family: YouYuan;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">用于将服务和服务实例与分布式消息系统链接在一起的事件总线。在集群中传播状态更改很有用（例如配置更改事件）。</p>\n</blockquote>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">你可以简单理解为 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Spring Cloud Bus</code> 的作用就是<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">管理和广播分布式系统中的消息</strong>，也就是消息引擎系统中的广播模式。当然作为 <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">消息总线</strong> 的 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Spring Cloud Bus</code> 可以做很多事而不仅仅是客户端的配置刷新功能。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">而拥有了 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Spring Cloud Bus</code> 之后，我们只需要创建一个简单的请求，并且加上 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">@ResfreshScope</code> 注解就能进行配置的动态修改了，下面我画了张图供你理解。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc26958ea0fe7?w=1221&amp;h=708&amp;f=jpeg&amp;s=144465\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-11\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.5em; border-bottom: 2.2px solid rgb(255, 111, 0);\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; background: rgb(255, 111, 0); padding: 5px 15px; display: inline-block;\">总结</span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">这篇文章中我带大家初步了解了 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Spring Cloud</code> 的各个组件，他们有</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Eureka 服务发现框架</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Ribbon 进程内负载均衡器</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Open Feign 服务调用映射</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Hystrix 服务降级熔断器</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Zuul 微服务网关</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Config 微服务统一配置中心</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Bus 消息总线</span></li>\n</ul>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">如果你能这个时候能看懂下面那张图，也就说明了你已经对 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">Spring Cloud</code> 微服务有了一定的架构认识。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://user-gold-cdn.xitu.io/2019/11/30/16ebc26b21515692?w=1355&amp;h=772&amp;f=jpeg&amp;s=94118\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 1em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 8px solid rgb(255, 138, 101); background: rgb(224, 242, 241); overflow: auto; overflow-wrap: normal; word-break: normal; letter-spacing: 1.5px; font-family: YouYuan;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">如果觉得我写的还不错，那就留下个赞吧！ 👍👍👍 </p>\n</blockquote></div>","blogCover":"http://img.francisqiang.top/1577549885","blogId":1,"blogTitle":"SpringCloud"}
2019-12-29 00:19:57.696 [http-nio-8080-exec-9] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 00:20:11.138 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 00:20:11.141 [http-nio-8080-exec-5] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 00:20:11.156 [http-nio-8080-exec-10] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 00:20:14.928 [http-nio-8080-exec-4] INFO  com.lgq.controller.TagController - FrancisBlog: getAllTag
2019-12-29 00:20:51.378 [http-nio-8080-exec-6] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:2
2019-12-29 00:20:52.842 [http-nio-8080-exec-3] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 00:21:10.490 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 00:21:10.497 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 00:21:10.497 [http-nio-8080-exec-1] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 00:21:11.156 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 00:21:11.188 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 00:21:11.268 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 00:21:11.268 [http-nio-8080-exec-9] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 00:34:39.897 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 00:34:39.905 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 00:34:39.986 [http-nio-8080-exec-8] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 00:34:40.056 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 00:34:40.061 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 00:34:40.157 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 00:34:40.157 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 00:41:10.267 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 00:41:10.269 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 00:41:10.275 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 00:41:10.285 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 00:41:10.298 [http-nio-8080-exec-10] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 00:41:10.503 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 00:41:10.503 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 00:41:10.673 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 00:41:10.677 [http-nio-8080-exec-1] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 00:42:47.657 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 00:42:47.934 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 00:42:47.939 [http-nio-8080-exec-10] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 00:42:47.947 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 00:43:13.376 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 00:43:13.377 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 00:43:13.377 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 00:43:13.385 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 00:43:41.843 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 00:43:41.849 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 00:43:41.851 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 00:43:41.858 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 09:06:23.160 [main] INFO  com.lgq.FrancisBlogApplication - Starting FrancisBlogApplication on DESKTOP-G6KT9CH with PID 17080 (I:\blog_for_feifeifei\blog-for-feifeifei\target\classes started by lin in I:\blog_for_feifeifei\blog-for-feifeifei)
2019-12-29 09:06:23.240 [main] INFO  com.lgq.FrancisBlogApplication - No active profile set, falling back to default profiles: default
2019-12-29 09:06:31.987 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2019-12-29 09:06:31.991 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data repositories in DEFAULT mode.
2019-12-29 09:06:32.124 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 91ms. Found 0 repository interfaces.
2019-12-29 09:06:32.815 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$335b598f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-29 09:06:33.979 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2019-12-29 09:06:34.036 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-12-29 09:06:34.049 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-12-29 09:06:34.050 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-12-29 09:06:34.078 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.17] of the APR based Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [1.2.21]
2019-12-29 09:06:34.078 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded APR based Apache Tomcat Native library [1.2.17] using APR version [1.6.3].
2019-12-29 09:06:34.079 [main] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2019-12-29 09:06:34.079 [main] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2019-12-29 09:06:35.261 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.0.2o  27 Mar 2018]
2019-12-29 09:06:35.554 [main] INFO  o.a.c.c.C.[.[localhost].[/francisblog/api/v1] - Initializing Spring embedded WebApplicationContext
2019-12-29 09:06:35.555 [main] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 11686 ms
2019-12-29 09:06:41.075 [main] INFO  s.d.s.w.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)]
2019-12-29 09:06:41.524 [main] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2019-12-29 09:06:42.333 [main] INFO  s.d.s.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2019-12-29 09:06:42.454 [main] INFO  s.d.s.web.plugins.DocumentationPluginsBootstrapper - Found 1 custom documentation plugin(s)
2019-12-29 09:06:42.530 [main] INFO  s.d.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2019-12-29 09:06:42.843 [main] INFO  s.d.s.w.r.operation.CachingOperationNameGenerator - Generating unique operation named: getAllAlbumUsingGET_1
2019-12-29 09:06:42.987 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-12-29 09:06:43.034 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/francisblog/api/v1'
2019-12-29 09:06:43.074 [main] INFO  com.lgq.FrancisBlogApplication - Started FrancisBlogApplication in 27.406 seconds (JVM running for 35.017)
2019-12-29 09:08:45.002 [http-nio-8080-exec-3] INFO  o.a.c.c.C.[.[localhost].[/francisblog/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-12-29 09:08:45.003 [http-nio-8080-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2019-12-29 09:08:45.013 [http-nio-8080-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 10 ms
2019-12-29 09:08:45.124 [http-nio-8080-exec-5] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 09:08:45.124 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 09:08:45.124 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 09:08:45.124 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 09:08:45.321 [http-nio-8080-exec-6] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2019-12-29 09:08:46.153 [http-nio-8080-exec-3] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2019-12-29 09:08:46.155 [http-nio-8080-exec-3] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2019-12-29 09:08:49.868 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 09:08:51.014 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 09:08:51.726 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 09:09:48.061 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 09:09:48.061 [http-nio-8080-exec-10] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 09:09:48.188 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 09:09:48.192 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 09:09:48.290 [http-nio-8080-exec-6] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 09:09:48.291 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 09:09:48.300 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 09:09:48.306 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 09:09:48.311 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 09:10:48.747 [http-nio-8080-exec-2] INFO  com.lgq.controller.AlbumController - FrancisBlog: getAllAlbum
2019-12-29 09:10:48.841 [http-nio-8080-exec-1] INFO  com.lgq.controller.AlbumPictureController - FrancisBlog: getAllAlbum
2019-12-29 09:10:58.463 [http-nio-8080-exec-6] INFO  com.lgq.controller.TagController - FrancisBlog: getAllTag
2019-12-29 09:10:59.184 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 09:10:59.663 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 09:11:00.819 [http-nio-8080-exec-3] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 09:11:01.657 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 09:11:01.660 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 09:11:02.276 [http-nio-8080-exec-7] INFO  com.lgq.controller.AlbumController - FrancisBlog: getAllAlbum
2019-12-29 09:11:03.034 [http-nio-8080-exec-9] INFO  com.lgq.controller.AlbumPictureController - FrancisBlog: getAllAlbum
2019-12-29 09:11:03.037 [http-nio-8080-exec-10] INFO  com.lgq.controller.AlbumController - FrancisBlog: getAllAlbum
2019-12-29 09:11:03.749 [http-nio-8080-exec-2] INFO  com.lgq.controller.AlbumController - FrancisBlog: getAllAlbum
2019-12-29 09:11:04.600 [http-nio-8080-exec-6] INFO  com.lgq.controller.AlbumController - FrancisBlog: getAllAlbum
2019-12-29 09:11:04.600 [http-nio-8080-exec-1] INFO  com.lgq.controller.AlbumPictureController - FrancisBlog: getAllAlbum
2019-12-29 09:11:05.168 [http-nio-8080-exec-4] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllMenu
2019-12-29 09:11:06.733 [http-nio-8080-exec-5] INFO  com.lgq.controller.UserController - FrancisBlog: getAllUser
2019-12-29 09:11:07.467 [http-nio-8080-exec-3] INFO  com.lgq.controller.BlogCommentController - FrancisBlog: getAllBlogComment
2019-12-29 09:11:09.801 [http-nio-8080-exec-8] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 09:11:12.134 [http-nio-8080-exec-7] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:2
2019-12-29 09:11:13.100 [http-nio-8080-exec-9] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 09:12:00.383 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 09:12:01.233 [http-nio-8080-exec-2] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 09:12:02.017 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 09:12:02.020 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 09:12:03.170 [http-nio-8080-exec-1] INFO  com.lgq.controller.AlbumController - FrancisBlog: getAllAlbum
2019-12-29 09:12:04.349 [http-nio-8080-exec-4] INFO  com.lgq.controller.AlbumPictureController - FrancisBlog: getAllAlbum
2019-12-29 09:12:04.354 [http-nio-8080-exec-5] INFO  com.lgq.controller.AlbumController - FrancisBlog: getAllAlbum
2019-12-29 09:12:05.533 [http-nio-8080-exec-3] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllMenu
2019-12-29 09:12:07.273 [http-nio-8080-exec-8] INFO  com.lgq.controller.UserController - FrancisBlog: getAllUser
2019-12-29 09:12:08.385 [http-nio-8080-exec-7] INFO  com.lgq.controller.BlogCommentController - FrancisBlog: getAllBlogComment
2019-12-29 09:12:10.121 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 09:12:10.778 [http-nio-8080-exec-10] INFO  com.lgq.controller.TagController - FrancisBlog: getAllTag
2019-12-29 09:12:12.679 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 09:12:13.583 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 09:12:14.662 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 09:12:28.034 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteTagController - FrancisBlog: updateSiteTag -> {"siteTagColor":"rgba(255, 221, 30, 0.41)","siteTagDescription":"aaaaaaa","siteTagId":6,"siteTagName":"aaaaaa"}
2019-12-29 09:12:28.232 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 09:12:37.454 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteTagController - FrancisBlog: updateSiteTag -> {"siteTagColor":"rgba(255, 69, 0, 0.45)","siteTagDescription":"a","siteTagId":5,"siteTagName":"q"}
2019-12-29 09:12:37.663 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 09:12:44.414 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteTagController - FrancisBlog: updateSiteTag -> {"siteTagColor":"rgba(255, 69, 0, 0.74)","siteTagDescription":"瘦瘦瘦","siteTagId":7,"siteTagName":"爱刘雪"}
2019-12-29 09:12:44.506 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 09:12:55.372 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteTagController - FrancisBlog: updateSiteTag -> {"siteTagColor":"rgba(250, 212, 0, 0.75)","siteTagDescription":"肥肥肥","siteTagId":8,"siteTagName":"爱肥肥"}
2019-12-29 09:12:55.581 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 09:13:01.921 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteTagController - FrancisBlog: updateSiteTag -> {"siteTagColor":"rgba(0, 206, 209, 0.5)","siteTagDescription":"肥肥肥","siteTagId":9,"siteTagName":"肥肥肥"}
2019-12-29 09:13:02.098 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 09:16:18.386 [http-nio-8080-exec-9] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 09:16:20.428 [http-nio-8080-exec-10] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:2
2019-12-29 09:16:21.543 [http-nio-8080-exec-2] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 09:16:23.121 [http-nio-8080-exec-6] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:2
2019-12-29 09:16:24.153 [http-nio-8080-exec-1] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 09:16:25.215 [http-nio-8080-exec-4] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:2
2019-12-29 09:16:34.974 [http-nio-8080-exec-5] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 09:17:12.434 [http-nio-8080-exec-3] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 09:19:41.625 [http-nio-8080-exec-9] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:2
2019-12-29 09:20:01.027 [http-nio-8080-exec-10] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 09:24:49.306 [http-nio-8080-exec-4] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:2
2019-12-29 09:24:52.421 [http-nio-8080-exec-5] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 09:29:07.312 [http-nio-8080-exec-7] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogById: blog_id:1
2019-12-29 09:29:07.498 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.BlogServiceImpl - null
2019-12-29 09:29:07.526 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.BlogServiceImpl - 61
2019-12-29 09:29:43.188 [http-nio-8080-exec-10] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 09:31:18.442 [http-nio-8080-exec-6] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 09:31:22.375 [http-nio-8080-exec-4] INFO  com.lgq.controller.AlbumController - FrancisBlog: getAllAlbum
2019-12-29 09:31:22.375 [http-nio-8080-exec-1] INFO  com.lgq.controller.AlbumPictureController - FrancisBlog: getAllAlbum
2019-12-29 09:33:42.915 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 09:33:42.924 [http-nio-8080-exec-7] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 09:33:42.925 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 09:33:42.930 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 09:33:42.952 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 09:33:44.932 [http-nio-8080-exec-6] INFO  com.lgq.controller.AlbumController - FrancisBlog: getAllAlbum
2019-12-29 09:33:44.932 [http-nio-8080-exec-2] INFO  com.lgq.controller.AlbumPictureController - FrancisBlog: getAllAlbum
2019-12-29 09:36:23.059 [http-nio-8080-exec-7] INFO  com.lgq.controller.AlbumPictureController - FrancisBlog: getAllAlbum
2019-12-29 09:36:23.059 [http-nio-8080-exec-10] INFO  com.lgq.controller.AlbumController - FrancisBlog: getAllAlbum
2019-12-29 09:36:40.616 [http-nio-8080-exec-6] INFO  com.lgq.controller.AlbumPictureController - FrancisBlog: getAllAlbum
2019-12-29 09:36:40.616 [http-nio-8080-exec-2] INFO  com.lgq.controller.AlbumController - FrancisBlog: getAllAlbum
2019-12-29 09:37:17.026 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 09:37:17.028 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 09:37:17.031 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 09:37:17.036 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 09:37:17.044 [http-nio-8080-exec-9] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 09:41:04.002 [http-nio-8080-exec-4] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 09:42:32.986 [http-nio-8080-exec-5] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 09:49:07.350 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 09:49:07.354 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 09:49:07.399 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 09:49:07.431 [http-nio-8080-exec-1] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 09:49:07.463 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 09:49:25.653 [http-nio-8080-exec-2] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 09:49:48.064 [http-nio-8080-exec-3] INFO  com.lgq.controller.CategoryController - FrancisBlog: addCategory -> {"categoryDescription":"Java分布式微服务Web框架","categoryName":"Spring Cloud"}
2019-12-29 09:51:53.911 [http-nio-8080-exec-10] INFO  com.lgq.controller.CategoryController - FrancisBlog: addCategory -> {"categoryDescription":"Java分布式微服务Web框架","categoryName":"Spring Cloud"}
2019-12-29 09:51:54.396 [http-nio-8080-exec-1] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 09:54:31.235 [http-nio-8080-exec-3] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 09:54:50.634 [http-nio-8080-exec-5] INFO  com.lgq.controller.CategoryController - FrancisBlog: addCategory -> {"categoryDescription":"高速缓存数据库","categoryName":"Redis"}
2019-12-29 09:54:50.812 [http-nio-8080-exec-9] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 09:59:17.807 [http-nio-8080-exec-8] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 10:00:15.597 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:00:15.609 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:00:15.614 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:00:15.622 [http-nio-8080-exec-4] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:00:15.626 [http-nio-8080-exec-3] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 10:00:15.726 [http-nio-8080-exec-10] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:00:15.839 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:00:15.842 [http-nio-8080-exec-5] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:00:16.003 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:00:16.006 [http-nio-8080-exec-9] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:00:17.626 [http-nio-8080-exec-7] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 10:02:18.517 [http-nio-8080-exec-4] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 10:03:49.050 [http-nio-8080-exec-9] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 10:03:54.213 [http-nio-8080-exec-7] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 10:04:03.137 [http-nio-8080-exec-8] INFO  com.lgq.controller.CategoryController - FrancisBlog: addCategory -> {"categoryDescription":"Java微服务Web框架","categoryId":3,"categoryName":"Spring Cloud"}
2019-12-29 10:04:03.363 [http-nio-8080-exec-2] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 10:05:07.657 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:05:07.675 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:05:07.677 [http-nio-8080-exec-1] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:05:07.681 [http-nio-8080-exec-4] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:05:07.681 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:05:13.990 [http-nio-8080-exec-9] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 10:05:32.547 [http-nio-8080-exec-8] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:05:32.551 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:05:32.551 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:05:32.557 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:05:32.557 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:06:24.560 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:06:24.564 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:06:24.565 [http-nio-8080-exec-10] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 10:06:24.567 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:06:24.567 [http-nio-8080-exec-9] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:06:24.658 [http-nio-8080-exec-3] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:06:24.695 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:06:24.699 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:06:24.944 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:06:24.947 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:06:32.172 [http-nio-8080-exec-8] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 10:07:20.531 [http-nio-8080-exec-10] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 10:08:14.586 [http-nio-8080-exec-5] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 10:08:19.083 [http-nio-8080-exec-8] INFO  com.lgq.controller.CategoryController - FrancisBlog: deleteCategory:4
2019-12-29 10:08:19.283 [http-nio-8080-exec-9] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 10:08:29.686 [http-nio-8080-exec-10] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 10:20:21.652 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:20:21.653 [http-nio-8080-exec-4] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 10:20:21.656 [http-nio-8080-exec-1] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:20:21.663 [http-nio-8080-exec-5] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:20:21.663 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:20:21.668 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:20:21.786 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:20:21.788 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:20:21.898 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:20:21.900 [http-nio-8080-exec-3] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:21:31.775 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:21:31.794 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:21:31.794 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:21:31.797 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:21:31.803 [http-nio-8080-exec-3] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:22:03.878 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:22:03.879 [http-nio-8080-exec-1] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:22:03.878 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:22:03.884 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:22:03.886 [http-nio-8080-exec-9] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:22:34.004 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:22:34.004 [http-nio-8080-exec-5] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:22:34.004 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:22:34.007 [http-nio-8080-exec-3] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:22:34.012 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:22:57.436 [http-nio-8080-exec-7] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:22:57.436 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:22:57.436 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:22:57.440 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:22:57.442 [http-nio-8080-exec-5] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:23:34.132 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:23:34.132 [http-nio-8080-exec-4] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:23:34.133 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:23:34.136 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:23:34.138 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:25:41.446 [http-nio-8080-exec-10] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:25:41.481 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:25:41.483 [http-nio-8080-exec-9] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:25:41.518 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:25:41.558 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:29:52.329 [http-nio-8080-exec-10] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:29:52.460 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:29:52.461 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:29:52.477 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:29:52.489 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:31:20.737 [http-nio-8080-exec-1] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:31:59.762 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:31:59.765 [http-nio-8080-exec-10] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:31:59.884 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:31:59.890 [http-nio-8080-exec-9] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:31:59.895 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:36:06.070 [http-nio-8080-exec-1] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:36:06.078 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:36:06.086 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:36:06.098 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:36:06.107 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:37:05.058 [http-nio-8080-exec-8] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 10:38:08.278 [http-nio-8080-exec-10] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 10:38:10.529 [http-nio-8080-exec-6] INFO  com.lgq.controller.AlbumPictureController - FrancisBlog: getAllAlbum
2019-12-29 10:38:10.530 [http-nio-8080-exec-9] INFO  com.lgq.controller.AlbumController - FrancisBlog: getAllAlbum
2019-12-29 10:38:12.143 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:38:12.597 [http-nio-8080-exec-7] INFO  com.lgq.controller.AlbumController - FrancisBlog: getAllAlbum
2019-12-29 10:38:12.597 [http-nio-8080-exec-8] INFO  com.lgq.controller.AlbumPictureController - FrancisBlog: getAllAlbum
2019-12-29 10:38:13.085 [http-nio-8080-exec-2] INFO  com.lgq.controller.TagController - FrancisBlog: getAllTag
2019-12-29 10:38:13.525 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:38:13.975 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 10:38:14.431 [http-nio-8080-exec-1] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 10:38:14.851 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:38:14.854 [http-nio-8080-exec-10] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:38:15.320 [http-nio-8080-exec-9] INFO  com.lgq.controller.AlbumController - FrancisBlog: getAllAlbum
2019-12-29 10:38:15.741 [http-nio-8080-exec-6] INFO  com.lgq.controller.AlbumPictureController - FrancisBlog: getAllAlbum
2019-12-29 10:38:15.742 [http-nio-8080-exec-4] INFO  com.lgq.controller.AlbumController - FrancisBlog: getAllAlbum
2019-12-29 10:38:16.168 [http-nio-8080-exec-8] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 10:38:16.704 [http-nio-8080-exec-7] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllMenu
2019-12-29 10:38:17.186 [http-nio-8080-exec-2] INFO  com.lgq.controller.UserController - FrancisBlog: getAllUser
2019-12-29 10:38:17.658 [http-nio-8080-exec-3] INFO  com.lgq.controller.BlogCommentController - FrancisBlog: getAllBlogComment
2019-12-29 10:38:18.377 [http-nio-8080-exec-5] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:38:20.259 [http-nio-8080-exec-1] INFO  com.lgq.controller.AlbumPictureController - FrancisBlog: getAllAlbum
2019-12-29 10:38:20.266 [http-nio-8080-exec-10] INFO  com.lgq.controller.AlbumController - FrancisBlog: getAllAlbum
2019-12-29 10:38:26.779 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:38:26.793 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:38:26.794 [http-nio-8080-exec-7] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:38:26.801 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:38:26.803 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:38:44.060 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:38:44.061 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:38:44.064 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:38:44.065 [http-nio-8080-exec-4] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:38:44.066 [http-nio-8080-exec-9] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:39:00.719 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:39:00.719 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:39:00.721 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:39:00.721 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:39:00.723 [http-nio-8080-exec-5] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:40:26.544 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:46:24.308 [http-nio-8080-exec-3] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:46:24.315 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:46:24.322 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:46:24.331 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:46:24.333 [http-nio-8080-exec-9] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:47:47.797 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:47:47.800 [http-nio-8080-exec-5] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:47:47.808 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:47:47.816 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:47:47.830 [http-nio-8080-exec-4] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:48:12.295 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:48:12.295 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:48:12.297 [http-nio-8080-exec-2] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:48:12.297 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:48:12.298 [http-nio-8080-exec-6] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 10:48:12.336 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:48:12.424 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:48:12.426 [http-nio-8080-exec-1] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:48:12.544 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:48:12.546 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:49:36.384 [http-nio-8080-exec-3] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:49:36.407 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:49:36.421 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:49:36.422 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:49:36.427 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:50:56.371 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:50:56.381 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:50:56.385 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:50:56.387 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:50:56.394 [http-nio-8080-exec-6] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:51:02.127 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:51:02.130 [http-nio-8080-exec-5] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 10:51:02.130 [http-nio-8080-exec-7] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:51:02.130 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:51:02.132 [http-nio-8080-exec-3] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:51:02.193 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:51:02.236 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:51:02.239 [http-nio-8080-exec-10] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:51:02.402 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:51:02.404 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:55:36.421 [http-nio-8080-exec-3] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:55:36.430 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:55:36.430 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:55:36.437 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:55:36.439 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:58:59.052 [http-nio-8080-exec-3] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 10:58:59.095 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:58:59.125 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:58:59.163 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:58:59.166 [http-nio-8080-exec-10] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:58:59.180 [http-nio-8080-exec-6] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:58:59.301 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:58:59.303 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:58:59.478 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:58:59.481 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:02.342 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:02.342 [http-nio-8080-exec-5] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:59:02.344 [http-nio-8080-exec-9] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:02.347 [http-nio-8080-exec-3] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 10:59:02.349 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:59:02.350 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:59:02.486 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:02.488 [http-nio-8080-exec-10] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:02.584 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:02.586 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:04.150 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:59:04.150 [http-nio-8080-exec-7] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:59:04.152 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:59:04.153 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:04.155 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:04.156 [http-nio-8080-exec-6] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 10:59:04.282 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:04.284 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:04.421 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:04.423 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:04.942 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:04.942 [http-nio-8080-exec-5] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:59:04.943 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:59:04.944 [http-nio-8080-exec-3] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:04.944 [http-nio-8080-exec-1] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 10:59:04.947 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:59:05.136 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:05.138 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:05.261 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:05.263 [http-nio-8080-exec-9] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:05.754 [http-nio-8080-exec-10] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:59:05.762 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:05.762 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:59:05.762 [http-nio-8080-exec-7] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 10:59:05.765 [http-nio-8080-exec-3] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:05.766 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:59:05.925 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:05.927 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:06.066 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:06.070 [http-nio-8080-exec-9] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:07.122 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:59:07.122 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:59:07.122 [http-nio-8080-exec-6] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 10:59:07.124 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:07.125 [http-nio-8080-exec-2] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:59:07.126 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:07.258 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:07.260 [http-nio-8080-exec-9] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:07.361 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:07.363 [http-nio-8080-exec-5] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:07.998 [http-nio-8080-exec-4] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:59:07.998 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:59:07.998 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:08.000 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:08.002 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:59:08.002 [http-nio-8080-exec-2] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 10:59:08.443 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:08.445 [http-nio-8080-exec-5] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:08.561 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:08.563 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:11.130 [http-nio-8080-exec-1] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:59:11.131 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:11.132 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:59:11.135 [http-nio-8080-exec-3] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:11.135 [http-nio-8080-exec-4] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 10:59:11.138 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:59:11.282 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:11.284 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:11.426 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:11.428 [http-nio-8080-exec-10] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:31.763 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:59:31.763 [http-nio-8080-exec-2] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 10:59:31.763 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:59:31.763 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:31.767 [http-nio-8080-exec-3] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:31.768 [http-nio-8080-exec-7] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:59:31.883 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:31.885 [http-nio-8080-exec-10] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:32.065 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:32.066 [http-nio-8080-exec-9] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:34.098 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:34.098 [http-nio-8080-exec-1] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:59:34.099 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:59:34.099 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:34.100 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:59:34.102 [http-nio-8080-exec-10] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 10:59:34.522 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:34.523 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:34.624 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:34.626 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:40.042 [http-nio-8080-exec-5] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 10:59:40.042 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:40.043 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 10:59:40.043 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:40.045 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 10:59:40.046 [http-nio-8080-exec-6] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 10:59:40.162 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:40.164 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 10:59:40.286 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 10:59:40.288 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:00:21.453 [http-nio-8080-exec-3] INFO  com.lgq.controller.TagController - FrancisBlog: getAllTag
2019-12-29 11:00:39.419 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:00:39.419 [http-nio-8080-exec-8] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 11:00:39.420 [http-nio-8080-exec-6] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 11:00:39.421 [http-nio-8080-exec-9] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:00:39.423 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 11:00:39.423 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 11:00:39.535 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:00:39.537 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:00:39.673 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:00:39.674 [http-nio-8080-exec-10] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:07:50.906 [http-nio-8080-exec-7] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 11:07:50.919 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:07:50.920 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 11:07:50.922 [http-nio-8080-exec-1] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:07:50.925 [http-nio-8080-exec-9] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 11:07:50.931 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 11:07:51.021 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:07:51.023 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:07:51.122 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:07:51.124 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:07:58.046 [http-nio-8080-exec-8] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:2
2019-12-29 11:07:59.093 [http-nio-8080-exec-1] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:3
2019-12-29 11:08:00.945 [http-nio-8080-exec-4] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:4
2019-12-29 11:08:01.203 [http-nio-8080-exec-3] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:5
2019-12-29 11:08:01.423 [http-nio-8080-exec-9] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:6
2019-12-29 11:08:04.022 [http-nio-8080-exec-2] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:7
2019-12-29 11:08:04.994 [http-nio-8080-exec-5] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:8
2019-12-29 11:08:08.064 [http-nio-8080-exec-6] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:9
2019-12-29 11:08:09.795 [http-nio-8080-exec-7] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:10
2019-12-29 11:08:15.602 [http-nio-8080-exec-10] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:11
2019-12-29 11:09:18.547 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:09:18.549 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:09:18.554 [http-nio-8080-exec-5] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 11:09:18.560 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 11:09:18.570 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 11:09:20.967 [http-nio-8080-exec-10] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:2
2019-12-29 11:09:22.416 [http-nio-8080-exec-8] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:3
2019-12-29 11:11:45.722 [http-nio-8080-exec-5] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 11:11:45.736 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:11:45.739 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:11:45.756 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 11:11:45.761 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 11:11:47.676 [http-nio-8080-exec-1] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:2
2019-12-29 11:11:49.229 [http-nio-8080-exec-3] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:3
2019-12-29 11:12:50.841 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 11:12:50.847 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:12:50.849 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:12:50.854 [http-nio-8080-exec-10] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 11:12:50.874 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 11:12:54.807 [http-nio-8080-exec-8] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:2
2019-12-29 11:14:10.451 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 11:14:10.454 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:14:10.456 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:14:10.458 [http-nio-8080-exec-1] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 11:14:10.462 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 11:14:13.790 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:14:13.798 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:14:13.804 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 11:14:13.806 [http-nio-8080-exec-10] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 11:14:13.807 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 11:14:14.876 [http-nio-8080-exec-1] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:2
2019-12-29 11:14:46.246 [http-nio-8080-exec-9] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 11:14:46.248 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 11:14:46.252 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:14:46.252 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 11:14:46.253 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:15:01.544 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 11:15:01.544 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:15:01.546 [http-nio-8080-exec-10] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:15:01.546 [http-nio-8080-exec-2] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 11:15:01.550 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 11:15:06.845 [http-nio-8080-exec-6] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:2
2019-12-29 11:15:09.645 [http-nio-8080-exec-7] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:3
2019-12-29 11:15:25.145 [http-nio-8080-exec-4] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:4
2019-12-29 11:15:28.625 [http-nio-8080-exec-8] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 11:15:28.626 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 11:15:28.628 [http-nio-8080-exec-9] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 11:15:28.629 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:15:28.630 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:15:28.739 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:15:28.741 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:15:28.805 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 11:15:28.837 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:15:28.838 [http-nio-8080-exec-3] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:15:32.925 [http-nio-8080-exec-10] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:2
2019-12-29 11:16:45.206 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:16:45.208 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:16:45.210 [http-nio-8080-exec-3] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 11:16:49.704 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:16:49.705 [http-nio-8080-exec-10] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 11:16:49.706 [http-nio-8080-exec-1] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:16:49.761 [http-nio-8080-exec-2] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 11:16:49.764 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 11:16:49.821 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:16:49.822 [http-nio-8080-exec-5] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:16:49.882 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 11:16:49.925 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:16:49.927 [http-nio-8080-exec-9] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:16:54.504 [http-nio-8080-exec-4] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:2
2019-12-29 11:19:38.431 [http-nio-8080-exec-8] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 11:19:38.444 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:19:38.450 [http-nio-8080-exec-5] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:19:38.462 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 11:19:38.560 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 11:19:45.427 [http-nio-8080-exec-4] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:2
2019-12-29 11:24:45.490 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 11:24:45.490 [http-nio-8080-exec-8] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 11:24:45.500 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:24:45.500 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 11:24:45.505 [http-nio-8080-exec-5] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:24:49.094 [http-nio-8080-exec-9] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:2
2019-12-29 11:24:54.773 [http-nio-8080-exec-4] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:3
2019-12-29 11:25:10.724 [http-nio-8080-exec-3] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:2
2019-12-29 11:25:19.792 [http-nio-8080-exec-7] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:3
2019-12-29 11:25:28.271 [http-nio-8080-exec-1] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:4
2019-12-29 11:25:34.231 [http-nio-8080-exec-10] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:5
2019-12-29 11:26:01.230 [http-nio-8080-exec-9] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 11:26:01.362 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:26:01.363 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:26:01.366 [http-nio-8080-exec-3] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 11:26:01.369 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 11:26:01.371 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 11:26:01.467 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:26:01.469 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:26:01.572 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:26:01.573 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:30:59.969 [http-nio-8080-exec-2] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 11:31:55.456 [http-nio-8080-exec-8] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:2
2019-12-29 11:34:33.400 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:34:33.402 [http-nio-8080-exec-9] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:34:33.449 [http-nio-8080-exec-3] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 11:34:33.481 [http-nio-8080-exec-4] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 11:34:33.492 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:34:33.495 [http-nio-8080-exec-1] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:34:33.514 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 11:34:33.519 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 11:34:33.600 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:34:33.601 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:35:09.383 [http-nio-8080-exec-6] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:2
2019-12-29 11:35:13.782 [http-nio-8080-exec-5] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:3
2019-12-29 11:42:40.861 [http-nio-8080-exec-2] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:3
2019-12-29 11:48:07.406 [http-nio-8080-exec-5] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 11:48:07.407 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:48:07.410 [http-nio-8080-exec-3] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:48:07.414 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 11:48:07.424 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 11:48:11.778 [http-nio-8080-exec-1] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:2
2019-12-29 11:53:42.859 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 11:53:42.872 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 11:53:42.874 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:53:42.876 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:53:42.880 [http-nio-8080-exec-1] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 11:55:50.384 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:55:50.387 [http-nio-8080-exec-3] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:55:50.390 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 11:55:50.398 [http-nio-8080-exec-7] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 11:55:50.399 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 11:55:55.645 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 11:55:55.645 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:55:55.647 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:55:55.650 [http-nio-8080-exec-9] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 11:55:55.666 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 11:55:55.704 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 11:56:05.934 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:56:05.935 [http-nio-8080-exec-2] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 11:56:05.936 [http-nio-8080-exec-1] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:56:06.039 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:56:06.040 [http-nio-8080-exec-10] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:57:23.222 [http-nio-8080-exec-4] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 11:57:23.236 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:57:23.239 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:57:23.354 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 11:57:23.357 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 11:58:37.244 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 11:58:55.816 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: addSiteFriendLink -> {"friendLinkDescription":"百度","friendLinkIconColor":"","friendLinkIconValue":"#icon-baidu","friendLinkName":"百度","friendLinkUrl":"www.baidu.com"}
2019-12-29 11:58:56.025 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:00:13.874 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 12:00:13.891 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:00:13.893 [http-nio-8080-exec-10] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:00:13.894 [http-nio-8080-exec-1] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 12:00:13.896 [http-nio-8080-exec-3] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 12:00:13.910 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 12:00:13.916 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:00:14.001 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:00:14.002 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 12:00:14.098 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:00:14.100 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 12:00:18.578 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:00:18.580 [http-nio-8080-exec-10] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:00:18.580 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 12:00:18.939 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:00:18.941 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 12:01:54.965 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:03:58.829 [http-nio-8080-exec-2] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 12:03:58.845 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:03:58.847 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX-2019-12-29
2019-12-29 12:03:58.851 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 12:03:58.874 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:03:58.882 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 12:05:53.991 [main] INFO  com.lgq.FrancisBlogApplication - Starting FrancisBlogApplication on DESKTOP-G6KT9CH with PID 5360 (I:\blog_for_feifeifei\blog-for-feifeifei\target\classes started by lin in I:\blog_for_feifeifei\blog-for-feifeifei)
2019-12-29 12:05:53.994 [main] INFO  com.lgq.FrancisBlogApplication - No active profile set, falling back to default profiles: default
2019-12-29 12:05:55.123 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2019-12-29 12:05:55.125 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data repositories in DEFAULT mode.
2019-12-29 12:05:55.187 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 49ms. Found 0 repository interfaces.
2019-12-29 12:05:55.481 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$5eec0c96] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-29 12:05:55.775 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2019-12-29 12:05:55.787 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-12-29 12:05:55.795 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-12-29 12:05:55.795 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-12-29 12:05:55.803 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.17] of the APR based Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [1.2.21]
2019-12-29 12:05:55.803 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded APR based Apache Tomcat Native library [1.2.17] using APR version [1.6.3].
2019-12-29 12:05:55.803 [main] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2019-12-29 12:05:55.804 [main] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2019-12-29 12:05:56.897 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.0.2o  27 Mar 2018]
2019-12-29 12:05:57.008 [main] INFO  o.a.c.c.C.[.[localhost].[/francisblog/api/v1] - Initializing Spring embedded WebApplicationContext
2019-12-29 12:05:57.009 [main] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2925 ms
2019-12-29 12:05:58.125 [main] INFO  s.d.s.w.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)]
2019-12-29 12:05:58.253 [main] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2019-12-29 12:05:58.537 [main] INFO  s.d.s.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2019-12-29 12:05:58.555 [main] INFO  s.d.s.web.plugins.DocumentationPluginsBootstrapper - Found 1 custom documentation plugin(s)
2019-12-29 12:05:58.601 [main] INFO  s.d.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2019-12-29 12:05:58.735 [main] INFO  s.d.s.w.r.operation.CachingOperationNameGenerator - Generating unique operation named: getAllAlbumUsingGET_1
2019-12-29 12:05:58.847 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-12-29 12:05:58.870 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/francisblog/api/v1'
2019-12-29 12:05:58.874 [main] INFO  com.lgq.FrancisBlogApplication - Started FrancisBlogApplication in 5.44 seconds (JVM running for 7.244)
2019-12-29 12:06:13.956 [http-nio-8080-exec-5] INFO  o.a.c.c.C.[.[localhost].[/francisblog/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-12-29 12:06:13.956 [http-nio-8080-exec-5] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2019-12-29 12:06:13.965 [http-nio-8080-exec-5] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 9 ms
2019-12-29 12:06:14.004 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 12:06:14.004 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:06:14.006 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 12:06:14.004 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:06:14.008 [http-nio-8080-exec-4] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:06:14.015 [http-nio-8080-exec-1] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 12:06:14.066 [http-nio-8080-exec-1] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2019-12-29 12:06:14.315 [http-nio-8080-exec-2] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2019-12-29 12:06:14.316 [http-nio-8080-exec-2] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2019-12-29 12:06:16.436 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:06:16.559 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:06:16.562 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:06:16.678 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:06:16.681 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:06:46.094 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:06:46.094 [http-nio-8080-exec-10] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:06:46.098 [http-nio-8080-exec-9] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:06:46.214 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:06:46.218 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:09:03.982 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:09:03.989 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:09:04.035 [http-nio-8080-exec-10] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:09:04.098 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:09:04.102 [http-nio-8080-exec-9] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:09:11.155 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
2019-12-29 12:09:31.717 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:09:31.721 [http-nio-8080-exec-5] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:09:31.723 [http-nio-8080-exec-3] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:09:31.836 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:09:31.840 [http-nio-8080-exec-1] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:10:21.593 [main] INFO  com.lgq.FrancisBlogApplication - Starting FrancisBlogApplication on DESKTOP-G6KT9CH with PID 19004 (I:\blog_for_feifeifei\blog-for-feifeifei\target\classes started by lin in I:\blog_for_feifeifei\blog-for-feifeifei)
2019-12-29 12:10:21.601 [main] INFO  com.lgq.FrancisBlogApplication - No active profile set, falling back to default profiles: default
2019-12-29 12:10:22.815 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2019-12-29 12:10:22.817 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data repositories in DEFAULT mode.
2019-12-29 12:10:22.882 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 52ms. Found 0 repository interfaces.
2019-12-29 12:10:23.182 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$26cc744a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-29 12:10:23.491 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2019-12-29 12:10:23.503 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-12-29 12:10:23.511 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-12-29 12:10:23.511 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-12-29 12:10:23.517 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.17] of the APR based Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [1.2.21]
2019-12-29 12:10:23.518 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded APR based Apache Tomcat Native library [1.2.17] using APR version [1.6.3].
2019-12-29 12:10:23.518 [main] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2019-12-29 12:10:23.518 [main] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2019-12-29 12:10:24.613 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.0.2o  27 Mar 2018]
2019-12-29 12:10:24.725 [main] INFO  o.a.c.c.C.[.[localhost].[/francisblog/api/v1] - Initializing Spring embedded WebApplicationContext
2019-12-29 12:10:24.725 [main] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2956 ms
2019-12-29 12:10:25.845 [main] INFO  s.d.s.w.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)]
2019-12-29 12:10:25.978 [main] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2019-12-29 12:10:26.266 [main] INFO  s.d.s.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2019-12-29 12:10:26.282 [main] INFO  s.d.s.web.plugins.DocumentationPluginsBootstrapper - Found 1 custom documentation plugin(s)
2019-12-29 12:10:26.331 [main] INFO  s.d.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2019-12-29 12:10:26.463 [main] INFO  s.d.s.w.r.operation.CachingOperationNameGenerator - Generating unique operation named: getAllAlbumUsingGET_1
2019-12-29 12:10:26.577 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-12-29 12:10:26.600 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/francisblog/api/v1'
2019-12-29 12:10:26.603 [main] INFO  com.lgq.FrancisBlogApplication - Started FrancisBlogApplication in 5.677 seconds (JVM running for 7.485)
2019-12-29 12:10:37.925 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/francisblog/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-12-29 12:10:37.926 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2019-12-29 12:10:37.936 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 10 ms
2019-12-29 12:10:37.964 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
2019-12-29 12:10:38.066 [http-nio-8080-exec-1] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2019-12-29 12:10:38.068 [http-nio-8080-exec-1] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2019-12-29 12:12:59.984 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:13:00.083 [http-nio-8080-exec-5] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2019-12-29 12:13:00.210 [http-nio-8080-exec-5] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:13:04.684 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
2019-12-29 12:13:08.277 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:13:08.277 [http-nio-8080-exec-8] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:13:08.280 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:13:08.400 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:13:08.404 [http-nio-8080-exec-9] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:13:39.537 [main] INFO  com.lgq.FrancisBlogApplication - Starting FrancisBlogApplication on DESKTOP-G6KT9CH with PID 17988 (I:\blog_for_feifeifei\blog-for-feifeifei\target\classes started by lin in I:\blog_for_feifeifei\blog-for-feifeifei)
2019-12-29 12:13:39.540 [main] INFO  com.lgq.FrancisBlogApplication - No active profile set, falling back to default profiles: default
2019-12-29 12:13:41.099 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2019-12-29 12:13:41.103 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data repositories in DEFAULT mode.
2019-12-29 12:13:41.173 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 56ms. Found 0 repository interfaces.
2019-12-29 12:13:41.533 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$c423f665] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-29 12:13:41.855 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2019-12-29 12:13:41.868 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-12-29 12:13:41.878 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-12-29 12:13:41.878 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-12-29 12:13:41.885 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.17] of the APR based Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [1.2.21]
2019-12-29 12:13:41.886 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded APR based Apache Tomcat Native library [1.2.17] using APR version [1.6.3].
2019-12-29 12:13:41.886 [main] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2019-12-29 12:13:41.886 [main] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2019-12-29 12:13:42.992 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.0.2o  27 Mar 2018]
2019-12-29 12:13:43.110 [main] INFO  o.a.c.c.C.[.[localhost].[/francisblog/api/v1] - Initializing Spring embedded WebApplicationContext
2019-12-29 12:13:43.110 [main] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 3528 ms
2019-12-29 12:13:44.300 [main] INFO  s.d.s.w.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)]
2019-12-29 12:13:44.449 [main] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2019-12-29 12:13:44.894 [main] INFO  s.d.s.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2019-12-29 12:13:44.911 [main] INFO  s.d.s.web.plugins.DocumentationPluginsBootstrapper - Found 1 custom documentation plugin(s)
2019-12-29 12:13:44.957 [main] INFO  s.d.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2019-12-29 12:13:45.099 [main] INFO  s.d.s.w.r.operation.CachingOperationNameGenerator - Generating unique operation named: getAllAlbumUsingGET_1
2019-12-29 12:13:45.291 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-12-29 12:13:45.316 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/francisblog/api/v1'
2019-12-29 12:13:45.320 [main] INFO  com.lgq.FrancisBlogApplication - Started FrancisBlogApplication in 6.387 seconds (JVM running for 8.358)
2019-12-29 12:13:53.150 [http-nio-8080-exec-2] INFO  o.a.c.c.C.[.[localhost].[/francisblog/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-12-29 12:13:53.151 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2019-12-29 12:13:53.159 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 8 ms
2019-12-29 12:13:53.178 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
2019-12-29 12:13:53.266 [http-nio-8080-exec-2] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2019-12-29 12:13:53.267 [http-nio-8080-exec-2] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2019-12-29 12:16:06.726 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:16:06.727 [http-nio-8080-exec-5] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:16:06.805 [http-nio-8080-exec-4] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2019-12-29 12:16:06.962 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:16:07.073 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:16:07.075 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:17:30.736 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
2019-12-29 12:17:55.681 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
2019-12-29 12:18:22.608 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:18:32.254 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: updateSiteFriendLink -> {"friendLinkDescription":"谷歌","friendLinkIconColor":"","friendLinkIconValue":"#icon-guge","friendLinkId":2,"friendLinkName":"谷歌","friendLinkUrl":"http://www.baidu.com"}
2019-12-29 12:18:32.470 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:18:39.653 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: updateSiteFriendLink -> {"friendLinkDescription":"百度","friendLinkIconColor":"","friendLinkIconValue":"#icon-baidu","friendLinkId":3,"friendLinkName":"百度","friendLinkUrl":"http://www.baidu.com"}
2019-12-29 12:18:39.992 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:18:49.246 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:18:49.249 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:18:49.254 [http-nio-8080-exec-9] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:18:49.357 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:18:49.360 [http-nio-8080-exec-10] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:19:05.380 [http-nio-8080-exec-1] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 12:19:05.380 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:19:05.383 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:19:05.431 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 12:19:05.436 [http-nio-8080-exec-5] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:19:05.493 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:19:05.557 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 12:19:05.560 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:19:05.564 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:19:05.673 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:19:05.675 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:20:03.418 [http-nio-8080-exec-10] INFO  com.lgq.controller.AlbumPictureController - FrancisBlog: getAllAlbum
2019-12-29 12:20:03.418 [http-nio-8080-exec-2] INFO  com.lgq.controller.AlbumController - FrancisBlog: getAllAlbum
2019-12-29 12:20:05.686 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
2019-12-29 12:20:26.431 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
2019-12-29 12:21:09.339 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
2019-12-29 12:22:44.319 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
2019-12-29 12:22:46.979 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
2019-12-29 12:22:54.008 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
2019-12-29 12:23:40.739 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 12:23:40.746 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 12:23:40.757 [http-nio-8080-exec-8] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 12:23:40.762 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:23:40.765 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:23:40.779 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:25:05.627 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
2019-12-29 12:26:23.028 [http-nio-8080-exec-3] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 12:33:21.313 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:33:21.317 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:33:21.327 [http-nio-8080-exec-6] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 12:33:21.333 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 12:33:21.336 [http-nio-8080-exec-2] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 12:33:21.342 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:33:21.345 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 12:35:09.889 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:35:09.890 [http-nio-8080-exec-8] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 12:35:09.896 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:35:09.898 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:35:09.908 [http-nio-8080-exec-5] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:35:09.915 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 12:35:09.918 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 12:35:09.999 [http-nio-8080-exec-9] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 12:35:10.016 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:35:10.018 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:35:10.118 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:35:10.121 [http-nio-8080-exec-10] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:36:06.040 [http-nio-8080-exec-8] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 12:36:06.041 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:36:06.042 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 12:36:06.042 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 12:36:06.043 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:36:06.041 [http-nio-8080-exec-5] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 12:36:06.048 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:36:17.480 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 12:36:17.480 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:36:17.481 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:36:17.481 [http-nio-8080-exec-6] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 12:36:17.486 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 12:36:17.488 [http-nio-8080-exec-4] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:36:17.490 [http-nio-8080-exec-1] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:36:17.604 [http-nio-8080-exec-7] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 12:36:17.605 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:36:17.608 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:36:17.741 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:36:17.752 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:38:36.802 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:38:36.806 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:38:36.812 [http-nio-8080-exec-8] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 12:38:36.818 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 12:38:36.826 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 12:38:36.829 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:38:36.845 [http-nio-8080-exec-6] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 12:38:51.326 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:38:51.328 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 12:38:51.329 [http-nio-8080-exec-1] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:38:51.330 [http-nio-8080-exec-7] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 12:38:51.332 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 12:38:51.332 [http-nio-8080-exec-5] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 12:38:51.333 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:39:14.957 [http-nio-8080-exec-3] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:39:14.958 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 12:39:14.961 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:39:14.963 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:39:14.963 [http-nio-8080-exec-8] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 12:39:14.963 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 12:39:14.967 [http-nio-8080-exec-5] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:39:15.079 [http-nio-8080-exec-10] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 12:39:15.080 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:39:15.082 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:39:15.179 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:39:15.182 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:40:03.821 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:40:03.822 [http-nio-8080-exec-7] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:40:03.824 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:40:03.942 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:40:03.945 [http-nio-8080-exec-1] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:40:08.144 [http-nio-8080-exec-5] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:40:08.144 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:40:08.147 [http-nio-8080-exec-9] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:40:08.262 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:40:08.265 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:40:33.792 [http-nio-8080-exec-6] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 12:40:35.513 [http-nio-8080-exec-2] INFO  com.lgq.controller.TokenController - FrancisBlog: getToken
2019-12-29 12:40:58.750 [http-nio-8080-exec-1] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: addAdvertisement -> {"advertisementDescription":"Zuul","advertisementName":"Zuul","advertisementPicture":"http://img.francisqiang.top/1577594438","advertisementUrl":"http:www.baidu.com"}
2019-12-29 12:40:58.928 [http-nio-8080-exec-5] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 12:41:05.301 [http-nio-8080-exec-9] INFO  com.lgq.controller.TokenController - FrancisBlog: getToken
2019-12-29 12:41:17.669 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:41:17.672 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:41:17.686 [http-nio-8080-exec-6] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:41:17.778 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:41:17.780 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:41:19.702 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:41:19.704 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:41:19.706 [http-nio-8080-exec-5] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 12:41:19.761 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 12:41:19.764 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 12:41:19.823 [http-nio-8080-exec-4] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 12:41:19.825 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:41:19.828 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:41:19.883 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:41:19.887 [http-nio-8080-exec-1] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:41:19.937 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:41:19.940 [http-nio-8080-exec-5] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:41:23.252 [http-nio-8080-exec-9] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: updateAdvertisement -> {"advertisementDescription":"aaa","advertisementId":3,"advertisementName":"aaa","advertisementPicture":"http://img.francisqiang.top/1577416370","advertisementUrl":"http:www.baidu.com"}
2019-12-29 12:41:23.471 [http-nio-8080-exec-10] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 12:41:35.479 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:41:35.479 [http-nio-8080-exec-3] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:41:35.482 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:41:35.594 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:41:35.596 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:41:54.678 [http-nio-8080-exec-7] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: updateAdvertisement -> {"advertisementDescription":"aaa","advertisementId":3,"advertisementName":"aaa","advertisementPicture":"http://img.francisqiang.top/1577416370","advertisementUrl":"http://www.baidu.com"}
2019-12-29 12:41:55.043 [http-nio-8080-exec-2] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 12:42:03.253 [http-nio-8080-exec-1] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: updateAdvertisement -> {"advertisementDescription":"Zuul","advertisementId":4,"advertisementName":"Zuul","advertisementPicture":"http://img.francisqiang.top/1577594438","advertisementUrl":"http://www.baidu.com"}
2019-12-29 12:42:03.454 [http-nio-8080-exec-5] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 12:42:11.237 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:42:11.239 [http-nio-8080-exec-10] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:42:11.241 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:42:11.402 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:42:11.406 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:42:19.567 [http-nio-8080-exec-6] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:42:19.568 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:42:19.570 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:42:19.681 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:42:19.683 [http-nio-8080-exec-1] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:42:30.245 [http-nio-8080-exec-3] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 12:42:31.528 [http-nio-8080-exec-4] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 12:42:40.538 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:42:40.538 [http-nio-8080-exec-6] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:42:40.541 [http-nio-8080-exec-1] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:42:40.542 [http-nio-8080-exec-10] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 12:42:40.602 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 12:42:40.658 [http-nio-8080-exec-8] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 12:42:40.660 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:42:40.662 [http-nio-8080-exec-3] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:42:40.734 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 12:42:40.734 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:42:40.760 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:42:40.762 [http-nio-8080-exec-1] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:42:54.686 [http-nio-8080-exec-10] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:42:54.687 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 12:42:54.687 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:42:54.686 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 12:42:54.691 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:42:54.691 [http-nio-8080-exec-5] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 12:42:54.693 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:42:54.799 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:42:54.800 [http-nio-8080-exec-3] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 12:42:54.802 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:42:54.918 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:42:54.920 [http-nio-8080-exec-10] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-29
2019-12-29 12:44:10.560 [main] INFO  com.lgq.FrancisBlogApplication - Starting FrancisBlogApplication on DESKTOP-G6KT9CH with PID 10696 (I:\blog_for_feifeifei\blog-for-feifeifei\target\classes started by lin in I:\blog_for_feifeifei\blog-for-feifeifei)
2019-12-29 12:44:10.566 [main] INFO  com.lgq.FrancisBlogApplication - No active profile set, falling back to default profiles: default
2019-12-29 12:44:12.184 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2019-12-29 12:44:12.186 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data repositories in DEFAULT mode.
2019-12-29 12:44:12.266 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 63ms. Found 0 repository interfaces.
2019-12-29 12:44:12.600 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$bffb7e7e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-29 12:44:12.943 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2019-12-29 12:44:12.959 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-12-29 12:44:12.969 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-12-29 12:44:12.969 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-12-29 12:44:12.977 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.17] of the APR based Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [1.2.21]
2019-12-29 12:44:12.977 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded APR based Apache Tomcat Native library [1.2.17] using APR version [1.6.3].
2019-12-29 12:44:12.978 [main] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2019-12-29 12:44:12.978 [main] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2019-12-29 12:44:14.098 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.0.2o  27 Mar 2018]
2019-12-29 12:44:14.241 [main] INFO  o.a.c.c.C.[.[localhost].[/francisblog/api/v1] - Initializing Spring embedded WebApplicationContext
2019-12-29 12:44:14.241 [main] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 3620 ms
2019-12-29 12:44:15.592 [main] INFO  s.d.s.w.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)]
2019-12-29 12:44:15.751 [main] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2019-12-29 12:44:16.090 [main] INFO  s.d.s.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2019-12-29 12:44:16.109 [main] INFO  s.d.s.web.plugins.DocumentationPluginsBootstrapper - Found 1 custom documentation plugin(s)
2019-12-29 12:44:16.170 [main] INFO  s.d.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2019-12-29 12:44:16.336 [main] INFO  s.d.s.w.r.operation.CachingOperationNameGenerator - Generating unique operation named: getAllAlbumUsingGET_1
2019-12-29 12:44:16.453 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-12-29 12:44:16.481 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/francisblog/api/v1'
2019-12-29 12:44:16.484 [main] INFO  com.lgq.FrancisBlogApplication - Started FrancisBlogApplication in 6.525 seconds (JVM running for 8.469)
2019-12-29 12:44:42.057 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/francisblog/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-12-29 12:44:42.058 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2019-12-29 12:44:42.066 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 8 ms
2019-12-29 12:44:42.208 [http-nio-8080-exec-3] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 12:44:42.230 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 12:44:42.268 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:44:42.297 [http-nio-8080-exec-3] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2019-12-29 12:44:42.314 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:44:42.332 [http-nio-8080-exec-8] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:44:42.382 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 12:44:42.617 [http-nio-8080-exec-10] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 12:44:42.633 [http-nio-8080-exec-7] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2019-12-29 12:44:42.634 [http-nio-8080-exec-7] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2019-12-29 12:44:43.700 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:44:45.130 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-28
2019-12-29 12:44:45.130 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-28
2019-12-29 12:44:45.281 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:44:45.283 [http-nio-8080-exec-1] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-28
2019-12-29 12:44:45.397 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:44:45.401 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-28
2019-12-29 12:44:50.331 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:44:50.335 [http-nio-8080-exec-9] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-28
2019-12-29 12:44:51.194 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:44:51.201 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-28
2019-12-29 12:44:51.918 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:44:51.921 [http-nio-8080-exec-5] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-28
2019-12-29 12:44:52.480 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:44:52.485 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-28
2019-12-29 12:44:53.011 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:44:53.014 [http-nio-8080-exec-3] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-28
2019-12-29 12:44:53.503 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:44:53.507 [http-nio-8080-exec-10] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-28
2019-12-29 12:44:53.989 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:44:53.992 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-28
2019-12-29 12:44:54.445 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:44:54.451 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-28
2019-12-29 12:44:54.812 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:44:54.815 [http-nio-8080-exec-1] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-28
2019-12-29 12:44:57.105 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:44:57.108 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-28
2019-12-29 12:45:02.347 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:45:02.348 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:45:02.351 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 12:45:02.352 [http-nio-8080-exec-3] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 12:45:02.353 [http-nio-8080-exec-5] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-28
2019-12-29 12:45:02.351 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 12:45:02.356 [http-nio-8080-exec-8] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 12:45:05.386 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 12:45:05.388 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:45:05.390 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 12:45:05.391 [http-nio-8080-exec-2] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 12:45:05.394 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-28
2019-12-29 12:45:05.396 [http-nio-8080-exec-5] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:45:05.401 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:45:05.500 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:45:05.501 [http-nio-8080-exec-9] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 12:45:05.503 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-28
2019-12-29 12:45:05.621 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:45:05.627 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-28
2019-12-29 12:46:30.816 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
2019-12-29 12:47:02.411 [http-nio-8080-exec-10] INFO  com.lgq.controller.AlbumController - FrancisBlog: getAllAlbum
2019-12-29 12:47:02.411 [http-nio-8080-exec-7] INFO  com.lgq.controller.AlbumPictureController - FrancisBlog: getAllAlbum
2019-12-29 12:47:05.486 [http-nio-8080-exec-3] INFO  com.lgq.controller.UserController - FrancisBlog: getAllUser
2019-12-29 12:47:06.288 [http-nio-8080-exec-4] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllMenu
2019-12-29 12:47:08.742 [http-nio-8080-exec-8] INFO  com.lgq.controller.CategoryController - FrancisBlog: getAllCategory
2019-12-29 12:47:11.738 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
2019-12-29 12:48:16.976 [http-nio-8080-exec-10] INFO  com.lgq.controller.AlbumController - FrancisBlog: getAllAlbum
2019-12-29 12:48:16.976 [http-nio-8080-exec-6] INFO  com.lgq.controller.AlbumPictureController - FrancisBlog: getAllAlbum
2019-12-29 12:48:18.889 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 12:48:19.256 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
2019-12-29 12:49:37.376 [main] INFO  com.lgq.FrancisBlogApplication - Starting FrancisBlogApplication on DESKTOP-G6KT9CH with PID 19660 (I:\blog_for_feifeifei\blog-for-feifeifei\target\classes started by lin in I:\blog_for_feifeifei\blog-for-feifeifei)
2019-12-29 12:49:37.379 [main] INFO  com.lgq.FrancisBlogApplication - No active profile set, falling back to default profiles: default
2019-12-29 12:49:38.488 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2019-12-29 12:49:38.490 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data repositories in DEFAULT mode.
2019-12-29 12:49:38.555 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 51ms. Found 0 repository interfaces.
2019-12-29 12:49:38.844 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$1f342689] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-29 12:49:39.139 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2019-12-29 12:49:39.151 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-12-29 12:49:39.161 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-12-29 12:49:39.161 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-12-29 12:49:39.168 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.17] of the APR based Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [1.2.21]
2019-12-29 12:49:39.169 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded APR based Apache Tomcat Native library [1.2.17] using APR version [1.6.3].
2019-12-29 12:49:39.169 [main] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2019-12-29 12:49:39.169 [main] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2019-12-29 12:49:40.257 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.0.2o  27 Mar 2018]
2019-12-29 12:49:40.370 [main] INFO  o.a.c.c.C.[.[localhost].[/francisblog/api/v1] - Initializing Spring embedded WebApplicationContext
2019-12-29 12:49:40.371 [main] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2929 ms
2019-12-29 12:49:41.530 [main] INFO  s.d.s.w.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)]
2019-12-29 12:49:41.669 [main] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2019-12-29 12:49:41.978 [main] INFO  s.d.s.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2019-12-29 12:49:41.996 [main] INFO  s.d.s.web.plugins.DocumentationPluginsBootstrapper - Found 1 custom documentation plugin(s)
2019-12-29 12:49:42.049 [main] INFO  s.d.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2019-12-29 12:49:42.187 [main] INFO  s.d.s.w.r.operation.CachingOperationNameGenerator - Generating unique operation named: getAllAlbumUsingGET_1
2019-12-29 12:49:42.303 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-12-29 12:49:42.331 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/francisblog/api/v1'
2019-12-29 12:49:42.332 [main] INFO  com.lgq.FrancisBlogApplication - Started FrancisBlogApplication in 5.501 seconds (JVM running for 7.254)
2019-12-29 12:50:19.420 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/francisblog/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-12-29 12:50:19.420 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2019-12-29 12:50:19.430 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 10 ms
2019-12-29 12:50:19.449 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:50:19.515 [http-nio-8080-exec-1] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2019-12-29 12:50:19.744 [http-nio-8080-exec-1] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2019-12-29 12:50:19.746 [http-nio-8080-exec-1] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2019-12-29 12:50:21.900 [http-nio-8080-exec-1] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-27
2019-12-29 12:50:23.623 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:50:23.630 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-27
2019-12-29 12:50:24.461 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:50:24.464 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-27
2019-12-29 12:50:25.078 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:50:25.081 [http-nio-8080-exec-5] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-27
2019-12-29 12:50:25.557 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:50:25.560 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-27
2019-12-29 12:50:26.158 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:50:26.161 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-27
2019-12-29 12:50:28.658 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
2019-12-29 12:50:52.016 [main] INFO  com.lgq.FrancisBlogApplication - Starting FrancisBlogApplication on DESKTOP-G6KT9CH with PID 17912 (I:\blog_for_feifeifei\blog-for-feifeifei\target\classes started by lin in I:\blog_for_feifeifei\blog-for-feifeifei)
2019-12-29 12:50:52.019 [main] INFO  com.lgq.FrancisBlogApplication - No active profile set, falling back to default profiles: default
2019-12-29 12:50:53.165 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2019-12-29 12:50:53.168 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data repositories in DEFAULT mode.
2019-12-29 12:50:53.234 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 53ms. Found 0 repository interfaces.
2019-12-29 12:50:53.525 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$bef134ca] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-29 12:50:53.827 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2019-12-29 12:50:53.838 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-12-29 12:50:53.848 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-12-29 12:50:53.849 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-12-29 12:50:53.855 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.17] of the APR based Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [1.2.21]
2019-12-29 12:50:53.856 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded APR based Apache Tomcat Native library [1.2.17] using APR version [1.6.3].
2019-12-29 12:50:53.856 [main] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2019-12-29 12:50:53.856 [main] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2019-12-29 12:50:54.957 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.0.2o  27 Mar 2018]
2019-12-29 12:50:55.069 [main] INFO  o.a.c.c.C.[.[localhost].[/francisblog/api/v1] - Initializing Spring embedded WebApplicationContext
2019-12-29 12:50:55.069 [main] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2918 ms
2019-12-29 12:50:56.195 [main] INFO  s.d.s.w.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)]
2019-12-29 12:50:56.327 [main] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2019-12-29 12:50:56.620 [main] INFO  s.d.s.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2019-12-29 12:50:56.638 [main] INFO  s.d.s.web.plugins.DocumentationPluginsBootstrapper - Found 1 custom documentation plugin(s)
2019-12-29 12:50:56.685 [main] INFO  s.d.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2019-12-29 12:50:56.816 [main] INFO  s.d.s.w.r.operation.CachingOperationNameGenerator - Generating unique operation named: getAllAlbumUsingGET_1
2019-12-29 12:50:56.931 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-12-29 12:50:56.956 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/francisblog/api/v1'
2019-12-29 12:50:56.958 [main] INFO  com.lgq.FrancisBlogApplication - Started FrancisBlogApplication in 5.49 seconds (JVM running for 7.239)
2019-12-29 12:51:45.930 [http-nio-8080-exec-2] INFO  o.a.c.c.C.[.[localhost].[/francisblog/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-12-29 12:51:45.930 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2019-12-29 12:51:45.939 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 9 ms
2019-12-29 12:51:45.961 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:51:46.032 [http-nio-8080-exec-2] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2019-12-29 12:51:46.268 [http-nio-8080-exec-2] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2019-12-29 12:51:46.269 [http-nio-8080-exec-2] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2019-12-29 12:51:48.377 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-26
2019-12-29 12:51:49.557 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:51:49.562 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-26
2019-12-29 12:51:50.222 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:51:50.226 [http-nio-8080-exec-3] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-26
2019-12-29 12:51:50.895 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:51:50.901 [http-nio-8080-exec-5] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-26
2019-12-29 12:51:51.467 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:51:51.470 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-26
2019-12-29 12:51:51.925 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:51:51.928 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-26
2019-12-29 12:51:56.241 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
2019-12-29 12:52:02.102 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:52:02.105 [http-nio-8080-exec-9] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-26
2019-12-29 12:52:02.655 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:52:02.658 [http-nio-8080-exec-10] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-26
2019-12-29 12:52:03.013 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:52:03.017 [http-nio-8080-exec-1] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-26
2019-12-29 12:52:03.343 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:52:03.346 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-26
2019-12-29 12:52:03.673 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:52:03.677 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-26
2019-12-29 12:52:07.928 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
2019-12-29 12:52:24.956 [main] INFO  com.lgq.FrancisBlogApplication - Starting FrancisBlogApplication on DESKTOP-G6KT9CH with PID 18268 (I:\blog_for_feifeifei\blog-for-feifeifei\target\classes started by lin in I:\blog_for_feifeifei\blog-for-feifeifei)
2019-12-29 12:52:24.970 [main] INFO  com.lgq.FrancisBlogApplication - No active profile set, falling back to default profiles: default
2019-12-29 12:52:26.017 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2019-12-29 12:52:26.019 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data repositories in DEFAULT mode.
2019-12-29 12:52:26.084 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 51ms. Found 0 repository interfaces.
2019-12-29 12:52:26.381 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$7c2846ef] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-29 12:52:26.676 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2019-12-29 12:52:26.690 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-12-29 12:52:26.698 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-12-29 12:52:26.698 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-12-29 12:52:26.704 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.17] of the APR based Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [1.2.21]
2019-12-29 12:52:26.705 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded APR based Apache Tomcat Native library [1.2.17] using APR version [1.6.3].
2019-12-29 12:52:26.705 [main] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2019-12-29 12:52:26.705 [main] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2019-12-29 12:52:27.805 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.0.2o  27 Mar 2018]
2019-12-29 12:52:27.914 [main] INFO  o.a.c.c.C.[.[localhost].[/francisblog/api/v1] - Initializing Spring embedded WebApplicationContext
2019-12-29 12:52:27.915 [main] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2854 ms
2019-12-29 12:52:29.042 [main] INFO  s.d.s.w.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)]
2019-12-29 12:52:29.175 [main] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2019-12-29 12:52:29.466 [main] INFO  s.d.s.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2019-12-29 12:52:29.484 [main] INFO  s.d.s.web.plugins.DocumentationPluginsBootstrapper - Found 1 custom documentation plugin(s)
2019-12-29 12:52:29.531 [main] INFO  s.d.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2019-12-29 12:52:29.677 [main] INFO  s.d.s.w.r.operation.CachingOperationNameGenerator - Generating unique operation named: getAllAlbumUsingGET_1
2019-12-29 12:52:29.788 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-12-29 12:52:29.812 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/francisblog/api/v1'
2019-12-29 12:52:29.815 [main] INFO  com.lgq.FrancisBlogApplication - Started FrancisBlogApplication in 5.428 seconds (JVM running for 7.182)
2019-12-29 12:52:38.065 [http-nio-8080-exec-5] INFO  o.a.c.c.C.[.[localhost].[/francisblog/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-12-29 12:52:38.065 [http-nio-8080-exec-5] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2019-12-29 12:52:38.073 [http-nio-8080-exec-5] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 7 ms
2019-12-29 12:52:38.106 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 12:52:38.106 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:52:38.106 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 12:52:38.106 [http-nio-8080-exec-6] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:52:38.106 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:52:38.114 [http-nio-8080-exec-2] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 12:52:38.170 [http-nio-8080-exec-2] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2019-12-29 12:52:38.434 [http-nio-8080-exec-1] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2019-12-29 12:52:38.435 [http-nio-8080-exec-1] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2019-12-29 12:52:38.507 [http-nio-8080-exec-7] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 12:52:40.581 [http-nio-8080-exec-1] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-25
2019-12-29 12:52:40.697 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:52:40.700 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-25
2019-12-29 12:52:40.801 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:52:40.804 [http-nio-8080-exec-9] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-25
2019-12-29 12:52:41.642 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:52:41.645 [http-nio-8080-exec-10] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-25
2019-12-29 12:52:41.647 [http-nio-8080-exec-5] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:52:41.761 [http-nio-8080-exec-6] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:52:41.764 [http-nio-8080-exec-6] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-25
2019-12-29 12:52:49.412 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
2019-12-29 12:52:54.340 [http-nio-8080-exec-4] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 12:52:54.345 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:52:54.357 [http-nio-8080-exec-8] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:52:54.360 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 12:52:54.367 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 12:52:54.373 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:52:54.376 [http-nio-8080-exec-7] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-25
2019-12-29 12:52:54.495 [http-nio-8080-exec-3] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 12:52:54.502 [http-nio-8080-exec-4] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:52:54.505 [http-nio-8080-exec-4] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-25
2019-12-29 12:52:54.597 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:52:54.600 [http-nio-8080-exec-2] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-25
2019-12-29 12:53:09.116 [main] INFO  com.lgq.FrancisBlogApplication - Starting FrancisBlogApplication on DESKTOP-G6KT9CH with PID 16188 (I:\blog_for_feifeifei\blog-for-feifeifei\target\classes started by lin in I:\blog_for_feifeifei\blog-for-feifeifei)
2019-12-29 12:53:09.119 [main] INFO  com.lgq.FrancisBlogApplication - No active profile set, falling back to default profiles: default
2019-12-29 12:53:10.211 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2019-12-29 12:53:10.213 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data repositories in DEFAULT mode.
2019-12-29 12:53:10.279 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 53ms. Found 0 repository interfaces.
2019-12-29 12:53:10.585 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$5d912d49] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-12-29 12:53:10.898 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2019-12-29 12:53:10.911 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-12-29 12:53:10.920 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-12-29 12:53:10.920 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-12-29 12:53:10.926 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.17] of the APR based Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [1.2.21]
2019-12-29 12:53:10.926 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded APR based Apache Tomcat Native library [1.2.17] using APR version [1.6.3].
2019-12-29 12:53:10.926 [main] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2019-12-29 12:53:10.926 [main] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2019-12-29 12:53:12.012 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.0.2o  27 Mar 2018]
2019-12-29 12:53:12.125 [main] INFO  o.a.c.c.C.[.[localhost].[/francisblog/api/v1] - Initializing Spring embedded WebApplicationContext
2019-12-29 12:53:12.126 [main] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2912 ms
2019-12-29 12:53:13.297 [main] INFO  s.d.s.w.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)]
2019-12-29 12:53:13.448 [main] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2019-12-29 12:53:13.806 [main] INFO  s.d.s.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2019-12-29 12:53:13.832 [main] INFO  s.d.s.web.plugins.DocumentationPluginsBootstrapper - Found 1 custom documentation plugin(s)
2019-12-29 12:53:13.887 [main] INFO  s.d.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2019-12-29 12:53:14.038 [main] INFO  s.d.s.w.r.operation.CachingOperationNameGenerator - Generating unique operation named: getAllAlbumUsingGET_1
2019-12-29 12:53:14.154 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-12-29 12:53:14.182 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/francisblog/api/v1'
2019-12-29 12:53:14.186 [main] INFO  com.lgq.FrancisBlogApplication - Started FrancisBlogApplication in 5.691 seconds (JVM running for 7.499)
2019-12-29 12:54:09.680 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/francisblog/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-12-29 12:54:09.681 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2019-12-29 12:54:09.689 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 8 ms
2019-12-29 12:54:09.725 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 12:54:09.726 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteFriendLinkController - FrancisBlog: getAllSiteFriendLink
2019-12-29 12:54:09.725 [http-nio-8080-exec-4] INFO  com.lgq.controller.MenuController - FrancisBlog: getAllParentMenu
2019-12-29 12:54:09.725 [http-nio-8080-exec-5] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:54:09.725 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteIconController - FrancisBlog: getAllSiteIcon
2019-12-29 12:54:09.733 [http-nio-8080-exec-1] INFO  com.lgq.controller.BlogController - FrancisBlog: getBlogList:1
2019-12-29 12:54:09.791 [http-nio-8080-exec-1] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2019-12-29 12:54:10.058 [http-nio-8080-exec-5] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2019-12-29 12:54:10.059 [http-nio-8080-exec-5] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2019-12-29 12:54:10.121 [http-nio-8080-exec-6] INFO  com.lgq.controller.AdvertisementController - FrancisBlog: getAllAdvertisement
2019-12-29 12:54:12.160 [http-nio-8080-exec-5] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-24
2019-12-29 12:54:12.264 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:54:12.267 [http-nio-8080-exec-8] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-24
2019-12-29 12:54:12.385 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteInfo
2019-12-29 12:54:12.389 [http-nio-8080-exec-9] INFO  com.lgq.service.impl.SiteServiceImpl - DAY_PAGE_VIEW_PREFIX2019-12-24
2019-12-29 12:54:40.817 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
2019-12-29 12:57:03.036 [http-nio-8080-exec-8] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
2019-12-29 12:57:03.050 [http-nio-8080-exec-9] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
2019-12-29 12:57:07.589 [http-nio-8080-exec-10] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
2019-12-29 12:57:09.223 [http-nio-8080-exec-2] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 12:57:09.938 [http-nio-8080-exec-7] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
2019-12-29 12:57:10.622 [http-nio-8080-exec-3] INFO  com.lgq.controller.SiteTagController - FrancisBlog: getAllSiteTag
2019-12-29 12:57:15.536 [http-nio-8080-exec-1] INFO  com.lgq.controller.SiteController - FrancisBlog: getSiteViewTrend
